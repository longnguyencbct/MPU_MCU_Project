
MPU_MCU_Asignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021c8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080022d4  080022d4  000122d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022f8  080022f8  00020048  2**0
                  CONTENTS
  4 .ARM          00000000  080022f8  080022f8  00020048  2**0
                  CONTENTS
  5 .preinit_array 00000000  080022f8  080022f8  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022f8  080022f8  000122f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080022fc  080022fc  000122fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  08002300  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  20000048  08002348  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08002348  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .debug_info   000090ab  00000000  00000000  00020071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000191e  00000000  00000000  0002911c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a78  00000000  00000000  0002aa40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000990  00000000  00000000  0002b4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a62  00000000  00000000  0002be48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a714  00000000  00000000  000428aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084718  00000000  00000000  0004cfbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d16d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002974  00000000  00000000  000d172c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000048 	.word	0x20000048
 8000128:	00000000 	.word	0x00000000
 800012c:	080022bc 	.word	0x080022bc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000004c 	.word	0x2000004c
 8000148:	080022bc 	.word	0x080022bc

0800014c <fsm_for_automatic_leds>:
enum AUTO2 currM1State2 = A_GREEN2;
int counterTraffic[]={5, 3};

int lightSeconds[] = {5, 2, 3};
int lightSeconds_temp[] = {5, 2, 3};//red yellow green
void fsm_for_automatic_leds() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    if (timer_flag[3] == 1) {
 8000150:	4b39      	ldr	r3, [pc, #228]	; (8000238 <fsm_for_automatic_leds+0xec>)
 8000152:	68db      	ldr	r3, [r3, #12]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d16c      	bne.n	8000232 <fsm_for_automatic_leds+0xe6>
        setTimer(3, 100);
 8000158:	2164      	movs	r1, #100	; 0x64
 800015a:	2003      	movs	r0, #3
 800015c:	f000 fc88 	bl	8000a70 <setTimer>
        counterTraffic[0]--;
 8000160:	4b36      	ldr	r3, [pc, #216]	; (800023c <fsm_for_automatic_leds+0xf0>)
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	3b01      	subs	r3, #1
 8000166:	4a35      	ldr	r2, [pc, #212]	; (800023c <fsm_for_automatic_leds+0xf0>)
 8000168:	6013      	str	r3, [r2, #0]
        counterTraffic[1]--;
 800016a:	4b34      	ldr	r3, [pc, #208]	; (800023c <fsm_for_automatic_leds+0xf0>)
 800016c:	685b      	ldr	r3, [r3, #4]
 800016e:	3b01      	subs	r3, #1
 8000170:	4a32      	ldr	r2, [pc, #200]	; (800023c <fsm_for_automatic_leds+0xf0>)
 8000172:	6053      	str	r3, [r2, #4]

        if (counterTraffic[0] == 0) {
 8000174:	4b31      	ldr	r3, [pc, #196]	; (800023c <fsm_for_automatic_leds+0xf0>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b00      	cmp	r3, #0
 800017a:	d12a      	bne.n	80001d2 <fsm_for_automatic_leds+0x86>
        	OffAllLED1();
 800017c:	f000 fa5a 	bl	8000634 <OffAllLED1>
            switch (currM1State1) {
 8000180:	4b2f      	ldr	r3, [pc, #188]	; (8000240 <fsm_for_automatic_leds+0xf4>)
 8000182:	781b      	ldrb	r3, [r3, #0]
 8000184:	2b02      	cmp	r3, #2
 8000186:	d010      	beq.n	80001aa <fsm_for_automatic_leds+0x5e>
 8000188:	2b02      	cmp	r3, #2
 800018a:	dc23      	bgt.n	80001d4 <fsm_for_automatic_leds+0x88>
 800018c:	2b00      	cmp	r3, #0
 800018e:	d002      	beq.n	8000196 <fsm_for_automatic_leds+0x4a>
 8000190:	2b01      	cmp	r3, #1
 8000192:	d014      	beq.n	80001be <fsm_for_automatic_leds+0x72>
 8000194:	e01e      	b.n	80001d4 <fsm_for_automatic_leds+0x88>
                case A_RED1:
                    currM1State1 = A_GREEN1;
 8000196:	4b2a      	ldr	r3, [pc, #168]	; (8000240 <fsm_for_automatic_leds+0xf4>)
 8000198:	2202      	movs	r2, #2
 800019a:	701a      	strb	r2, [r3, #0]
                    counterTraffic[0] = lightSeconds[2];
 800019c:	4b29      	ldr	r3, [pc, #164]	; (8000244 <fsm_for_automatic_leds+0xf8>)
 800019e:	689b      	ldr	r3, [r3, #8]
 80001a0:	4a26      	ldr	r2, [pc, #152]	; (800023c <fsm_for_automatic_leds+0xf0>)
 80001a2:	6013      	str	r3, [r2, #0]
                    OnGreen1();
 80001a4:	f000 fa32 	bl	800060c <OnGreen1>
                    break;
 80001a8:	e014      	b.n	80001d4 <fsm_for_automatic_leds+0x88>
                case A_GREEN1:
                    currM1State1 = A_YELLOW1;
 80001aa:	4b25      	ldr	r3, [pc, #148]	; (8000240 <fsm_for_automatic_leds+0xf4>)
 80001ac:	2201      	movs	r2, #1
 80001ae:	701a      	strb	r2, [r3, #0]
                    counterTraffic[0] = lightSeconds[1];
 80001b0:	4b24      	ldr	r3, [pc, #144]	; (8000244 <fsm_for_automatic_leds+0xf8>)
 80001b2:	685b      	ldr	r3, [r3, #4]
 80001b4:	4a21      	ldr	r2, [pc, #132]	; (800023c <fsm_for_automatic_leds+0xf0>)
 80001b6:	6013      	str	r3, [r2, #0]
                    OnYellow1();
 80001b8:	f000 fa14 	bl	80005e4 <OnYellow1>
                    break;
 80001bc:	e00a      	b.n	80001d4 <fsm_for_automatic_leds+0x88>
                case A_YELLOW1:
                    currM1State1 = A_RED1;
 80001be:	4b20      	ldr	r3, [pc, #128]	; (8000240 <fsm_for_automatic_leds+0xf4>)
 80001c0:	2200      	movs	r2, #0
 80001c2:	701a      	strb	r2, [r3, #0]
                    counterTraffic[0] = lightSeconds[0];
 80001c4:	4b1f      	ldr	r3, [pc, #124]	; (8000244 <fsm_for_automatic_leds+0xf8>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	4a1c      	ldr	r2, [pc, #112]	; (800023c <fsm_for_automatic_leds+0xf0>)
 80001ca:	6013      	str	r3, [r2, #0]
                    OnRed1();
 80001cc:	f000 f9f6 	bl	80005bc <OnRed1>
                    break;
 80001d0:	e000      	b.n	80001d4 <fsm_for_automatic_leds+0x88>
            }
        }
 80001d2:	bf00      	nop

        if (counterTraffic[1] == 0) {
 80001d4:	4b19      	ldr	r3, [pc, #100]	; (800023c <fsm_for_automatic_leds+0xf0>)
 80001d6:	685b      	ldr	r3, [r3, #4]
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d12a      	bne.n	8000232 <fsm_for_automatic_leds+0xe6>
        	OffAllLED2();
 80001dc:	f000 fa6e 	bl	80006bc <OffAllLED2>
            switch (currM1State2) {
 80001e0:	4b19      	ldr	r3, [pc, #100]	; (8000248 <fsm_for_automatic_leds+0xfc>)
 80001e2:	781b      	ldrb	r3, [r3, #0]
 80001e4:	2b02      	cmp	r3, #2
 80001e6:	d010      	beq.n	800020a <fsm_for_automatic_leds+0xbe>
 80001e8:	2b02      	cmp	r3, #2
 80001ea:	dc23      	bgt.n	8000234 <fsm_for_automatic_leds+0xe8>
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d002      	beq.n	80001f6 <fsm_for_automatic_leds+0xaa>
 80001f0:	2b01      	cmp	r3, #1
 80001f2:	d014      	beq.n	800021e <fsm_for_automatic_leds+0xd2>
            }
        }
    }
    //updateM1LEDS();
//    update_counterTraffic_to_Buffer();
}
 80001f4:	e01e      	b.n	8000234 <fsm_for_automatic_leds+0xe8>
                    currM1State2 = A_GREEN2;
 80001f6:	4b14      	ldr	r3, [pc, #80]	; (8000248 <fsm_for_automatic_leds+0xfc>)
 80001f8:	2202      	movs	r2, #2
 80001fa:	701a      	strb	r2, [r3, #0]
                    counterTraffic[1] = lightSeconds[2];
 80001fc:	4b11      	ldr	r3, [pc, #68]	; (8000244 <fsm_for_automatic_leds+0xf8>)
 80001fe:	689b      	ldr	r3, [r3, #8]
 8000200:	4a0e      	ldr	r2, [pc, #56]	; (800023c <fsm_for_automatic_leds+0xf0>)
 8000202:	6053      	str	r3, [r2, #4]
                    OnGreen2();
 8000204:	f000 fa4a 	bl	800069c <OnGreen2>
                    break;
 8000208:	e014      	b.n	8000234 <fsm_for_automatic_leds+0xe8>
                    currM1State2 = A_YELLOW2;
 800020a:	4b0f      	ldr	r3, [pc, #60]	; (8000248 <fsm_for_automatic_leds+0xfc>)
 800020c:	2201      	movs	r2, #1
 800020e:	701a      	strb	r2, [r3, #0]
                    counterTraffic[1] = lightSeconds[1];
 8000210:	4b0c      	ldr	r3, [pc, #48]	; (8000244 <fsm_for_automatic_leds+0xf8>)
 8000212:	685b      	ldr	r3, [r3, #4]
 8000214:	4a09      	ldr	r2, [pc, #36]	; (800023c <fsm_for_automatic_leds+0xf0>)
 8000216:	6053      	str	r3, [r2, #4]
                    OnYellow2();
 8000218:	f000 fa30 	bl	800067c <OnYellow2>
                    break;
 800021c:	e00a      	b.n	8000234 <fsm_for_automatic_leds+0xe8>
                    currM1State2 = A_RED2;
 800021e:	4b0a      	ldr	r3, [pc, #40]	; (8000248 <fsm_for_automatic_leds+0xfc>)
 8000220:	2200      	movs	r2, #0
 8000222:	701a      	strb	r2, [r3, #0]
                    counterTraffic[1] = lightSeconds[0];
 8000224:	4b07      	ldr	r3, [pc, #28]	; (8000244 <fsm_for_automatic_leds+0xf8>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a04      	ldr	r2, [pc, #16]	; (800023c <fsm_for_automatic_leds+0xf0>)
 800022a:	6053      	str	r3, [r2, #4]
                    OnRed2();
 800022c:	f000 fa16 	bl	800065c <OnRed2>
                    break;
 8000230:	e000      	b.n	8000234 <fsm_for_automatic_leds+0xe8>
        }
 8000232:	bf00      	nop
}
 8000234:	bf00      	nop
 8000236:	bd80      	pop	{r7, pc}
 8000238:	200000b0 	.word	0x200000b0
 800023c:	20000004 	.word	0x20000004
 8000240:	20000065 	.word	0x20000065
 8000244:	2000000c 	.word	0x2000000c
 8000248:	20000000 	.word	0x20000000

0800024c <fsm_for_input_processing>:

void fsm_for_input_processing(void){
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
	if(timer_flag[1]==1){
 8000250:	4b75      	ldr	r3, [pc, #468]	; (8000428 <fsm_for_input_processing+0x1dc>)
 8000252:	685b      	ldr	r3, [r3, #4]
 8000254:	2b01      	cmp	r3, #1
 8000256:	f040 80dc 	bne.w	8000412 <fsm_for_input_processing+0x1c6>
		setTimer(1,30);
 800025a:	211e      	movs	r1, #30
 800025c:	2001      	movs	r0, #1
 800025e:	f000 fc07 	bl	8000a70 <setTimer>
		switch(currMode){
 8000262:	4b72      	ldr	r3, [pc, #456]	; (800042c <fsm_for_input_processing+0x1e0>)
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	2b03      	cmp	r3, #3
 8000268:	f200 80da 	bhi.w	8000420 <fsm_for_input_processing+0x1d4>
 800026c:	a201      	add	r2, pc, #4	; (adr r2, 8000274 <fsm_for_input_processing+0x28>)
 800026e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000272:	bf00      	nop
 8000274:	08000285 	.word	0x08000285
 8000278:	080002b1 	.word	0x080002b1
 800027c:	08000327 	.word	0x08000327
 8000280:	0800039d 	.word	0x0800039d
		case MODE1:
			if(is_button_pressed(0)||is_button_pressed_1s(0)){
 8000284:	2000      	movs	r0, #0
 8000286:	f000 f965 	bl	8000554 <is_button_pressed>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d105      	bne.n	800029c <fsm_for_input_processing+0x50>
 8000290:	2000      	movs	r0, #0
 8000292:	f000 f979 	bl	8000588 <is_button_pressed_1s>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d006      	beq.n	80002aa <fsm_for_input_processing+0x5e>
				currMode = MODE2;
 800029c:	4b63      	ldr	r3, [pc, #396]	; (800042c <fsm_for_input_processing+0x1e0>)
 800029e:	2201      	movs	r2, #1
 80002a0:	701a      	strb	r2, [r3, #0]
				OffAllLED();
 80002a2:	f000 fa1b 	bl	80006dc <OffAllLED>
				ToggleAllRed();
 80002a6:	f000 fa21 	bl	80006ec <ToggleAllRed>
//				resetBuffer_lightSeconds();
			}
			 fsm_for_automatic_leds();//////////////fsm for automatic leds
 80002aa:	f7ff ff4f 	bl	800014c <fsm_for_automatic_leds>
			break;
 80002ae:	e0b7      	b.n	8000420 <fsm_for_input_processing+0x1d4>
		case MODE2:
			if(is_button_pressed(0)||is_button_pressed_1s(0)){
 80002b0:	2000      	movs	r0, #0
 80002b2:	f000 f94f 	bl	8000554 <is_button_pressed>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d105      	bne.n	80002c8 <fsm_for_input_processing+0x7c>
 80002bc:	2000      	movs	r0, #0
 80002be:	f000 f963 	bl	8000588 <is_button_pressed_1s>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d006      	beq.n	80002d6 <fsm_for_input_processing+0x8a>
				currMode = MODE3;
 80002c8:	4b58      	ldr	r3, [pc, #352]	; (800042c <fsm_for_input_processing+0x1e0>)
 80002ca:	2202      	movs	r2, #2
 80002cc:	701a      	strb	r2, [r3, #0]
//				sevenLEDvalueToDisplay(0,3);
//				sevenLEDvalueToDisplay(1,lightSeconds[1]);
				OffAllLED();
 80002ce:	f000 fa05 	bl	80006dc <OffAllLED>
				ToggleAllYellow();
 80002d2:	f000 fa23 	bl	800071c <ToggleAllYellow>
//				resetBuffer_lightSeconds();
			}
			if(is_button_pressed(1)||is_button_pressed_1s(1)){
 80002d6:	2001      	movs	r0, #1
 80002d8:	f000 f93c 	bl	8000554 <is_button_pressed>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d105      	bne.n	80002ee <fsm_for_input_processing+0xa2>
 80002e2:	2001      	movs	r0, #1
 80002e4:	f000 f950 	bl	8000588 <is_button_pressed_1s>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d00b      	beq.n	8000306 <fsm_for_input_processing+0xba>
				lightSeconds_temp[0]+=1;
 80002ee:	4b50      	ldr	r3, [pc, #320]	; (8000430 <fsm_for_input_processing+0x1e4>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	3301      	adds	r3, #1
 80002f4:	4a4e      	ldr	r2, [pc, #312]	; (8000430 <fsm_for_input_processing+0x1e4>)
 80002f6:	6013      	str	r3, [r2, #0]
				if(lightSeconds_temp[0]>99){
 80002f8:	4b4d      	ldr	r3, [pc, #308]	; (8000430 <fsm_for_input_processing+0x1e4>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	2b63      	cmp	r3, #99	; 0x63
 80002fe:	dd02      	ble.n	8000306 <fsm_for_input_processing+0xba>
					lightSeconds_temp[0]=1;
 8000300:	4b4b      	ldr	r3, [pc, #300]	; (8000430 <fsm_for_input_processing+0x1e4>)
 8000302:	2201      	movs	r2, #1
 8000304:	601a      	str	r2, [r3, #0]
				}
//				sevenLEDvalueToDisplay(1,lightSeconds_temp[0]);
			}
			if(is_button_pressed(2)||is_button_pressed_1s(2)){
 8000306:	2002      	movs	r0, #2
 8000308:	f000 f924 	bl	8000554 <is_button_pressed>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d105      	bne.n	800031e <fsm_for_input_processing+0xd2>
 8000312:	2002      	movs	r0, #2
 8000314:	f000 f938 	bl	8000588 <is_button_pressed_1s>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d07b      	beq.n	8000416 <fsm_for_input_processing+0x1ca>
				currMode = MODE1;
 800031e:	4b43      	ldr	r3, [pc, #268]	; (800042c <fsm_for_input_processing+0x1e0>)
 8000320:	2200      	movs	r2, #0
 8000322:	701a      	strb	r2, [r3, #0]

//				M1_transition_function();
			}
//			sevenLEDvalueToDisplay(0,2);
//			sevenLEDvalueToDisplay(1,lightSeconds_temp[0]);
			break;
 8000324:	e077      	b.n	8000416 <fsm_for_input_processing+0x1ca>
		case MODE3:
			if(is_button_pressed(0)||is_button_pressed_1s(0)){
 8000326:	2000      	movs	r0, #0
 8000328:	f000 f914 	bl	8000554 <is_button_pressed>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d105      	bne.n	800033e <fsm_for_input_processing+0xf2>
 8000332:	2000      	movs	r0, #0
 8000334:	f000 f928 	bl	8000588 <is_button_pressed_1s>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d004      	beq.n	8000348 <fsm_for_input_processing+0xfc>
				currMode = MODE4;
 800033e:	4b3b      	ldr	r3, [pc, #236]	; (800042c <fsm_for_input_processing+0x1e0>)
 8000340:	2203      	movs	r2, #3
 8000342:	701a      	strb	r2, [r3, #0]
//				sevenLEDvalueToDisplay(0,4);
//				sevenLEDvalueToDisplay(1,lightSeconds[2]);
				OffAllLED();
 8000344:	f000 f9ca 	bl	80006dc <OffAllLED>
				//ToggleAllGreen();
//				resetBuffer_lightSeconds();
			}
			if(is_button_pressed(1)||is_button_pressed_1s(1)){
 8000348:	2001      	movs	r0, #1
 800034a:	f000 f903 	bl	8000554 <is_button_pressed>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d105      	bne.n	8000360 <fsm_for_input_processing+0x114>
 8000354:	2001      	movs	r0, #1
 8000356:	f000 f917 	bl	8000588 <is_button_pressed_1s>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d00b      	beq.n	8000378 <fsm_for_input_processing+0x12c>
				lightSeconds_temp[1]+=1;
 8000360:	4b33      	ldr	r3, [pc, #204]	; (8000430 <fsm_for_input_processing+0x1e4>)
 8000362:	685b      	ldr	r3, [r3, #4]
 8000364:	3301      	adds	r3, #1
 8000366:	4a32      	ldr	r2, [pc, #200]	; (8000430 <fsm_for_input_processing+0x1e4>)
 8000368:	6053      	str	r3, [r2, #4]
				if(lightSeconds_temp[1]>99){
 800036a:	4b31      	ldr	r3, [pc, #196]	; (8000430 <fsm_for_input_processing+0x1e4>)
 800036c:	685b      	ldr	r3, [r3, #4]
 800036e:	2b63      	cmp	r3, #99	; 0x63
 8000370:	dd02      	ble.n	8000378 <fsm_for_input_processing+0x12c>
					lightSeconds_temp[1]=1;
 8000372:	4b2f      	ldr	r3, [pc, #188]	; (8000430 <fsm_for_input_processing+0x1e4>)
 8000374:	2201      	movs	r2, #1
 8000376:	605a      	str	r2, [r3, #4]
				}
//				sevenLEDvalueToDisplay(1,lightSeconds_temp[1]);
			}
			if(is_button_pressed(2)||is_button_pressed_1s(2)){
 8000378:	2002      	movs	r0, #2
 800037a:	f000 f8eb 	bl	8000554 <is_button_pressed>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d105      	bne.n	8000390 <fsm_for_input_processing+0x144>
 8000384:	2002      	movs	r0, #2
 8000386:	f000 f8ff 	bl	8000588 <is_button_pressed_1s>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d044      	beq.n	800041a <fsm_for_input_processing+0x1ce>
				currMode = MODE1;
 8000390:	4b26      	ldr	r3, [pc, #152]	; (800042c <fsm_for_input_processing+0x1e0>)
 8000392:	2200      	movs	r2, #0
 8000394:	701a      	strb	r2, [r3, #0]
//				saveBuffer_lightSeconds();

				M1_transition_function();
 8000396:	f000 f857 	bl	8000448 <M1_transition_function>
			}
//			sevenLEDvalueToDisplay(0,3);
//			sevenLEDvalueToDisplay(1,lightSeconds_temp[1]);
			break;
 800039a:	e03e      	b.n	800041a <fsm_for_input_processing+0x1ce>
		case MODE4:
			if(is_button_pressed(0)||is_button_pressed_1s(0)){
 800039c:	2000      	movs	r0, #0
 800039e:	f000 f8d9 	bl	8000554 <is_button_pressed>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d105      	bne.n	80003b4 <fsm_for_input_processing+0x168>
 80003a8:	2000      	movs	r0, #0
 80003aa:	f000 f8ed 	bl	8000588 <is_button_pressed_1s>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d004      	beq.n	80003be <fsm_for_input_processing+0x172>
				currMode = MODE1;
 80003b4:	4b1d      	ldr	r3, [pc, #116]	; (800042c <fsm_for_input_processing+0x1e0>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	701a      	strb	r2, [r3, #0]
//				resetBuffer_lightSeconds();

				M1_transition_function();
 80003ba:	f000 f845 	bl	8000448 <M1_transition_function>
			}
			if(is_button_pressed(1)||is_button_pressed_1s(1)){
 80003be:	2001      	movs	r0, #1
 80003c0:	f000 f8c8 	bl	8000554 <is_button_pressed>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d105      	bne.n	80003d6 <fsm_for_input_processing+0x18a>
 80003ca:	2001      	movs	r0, #1
 80003cc:	f000 f8dc 	bl	8000588 <is_button_pressed_1s>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d00b      	beq.n	80003ee <fsm_for_input_processing+0x1a2>
				lightSeconds_temp[2]+=1;
 80003d6:	4b16      	ldr	r3, [pc, #88]	; (8000430 <fsm_for_input_processing+0x1e4>)
 80003d8:	689b      	ldr	r3, [r3, #8]
 80003da:	3301      	adds	r3, #1
 80003dc:	4a14      	ldr	r2, [pc, #80]	; (8000430 <fsm_for_input_processing+0x1e4>)
 80003de:	6093      	str	r3, [r2, #8]
				if(lightSeconds_temp[2]>99){
 80003e0:	4b13      	ldr	r3, [pc, #76]	; (8000430 <fsm_for_input_processing+0x1e4>)
 80003e2:	689b      	ldr	r3, [r3, #8]
 80003e4:	2b63      	cmp	r3, #99	; 0x63
 80003e6:	dd02      	ble.n	80003ee <fsm_for_input_processing+0x1a2>
					lightSeconds_temp[2]=1;
 80003e8:	4b11      	ldr	r3, [pc, #68]	; (8000430 <fsm_for_input_processing+0x1e4>)
 80003ea:	2201      	movs	r2, #1
 80003ec:	609a      	str	r2, [r3, #8]
				}
//				sevenLEDvalueToDisplay(1,lightSeconds_temp[2]);
			}
			if(is_button_pressed(2)||is_button_pressed_1s(2)){
 80003ee:	2002      	movs	r0, #2
 80003f0:	f000 f8b0 	bl	8000554 <is_button_pressed>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d105      	bne.n	8000406 <fsm_for_input_processing+0x1ba>
 80003fa:	2002      	movs	r0, #2
 80003fc:	f000 f8c4 	bl	8000588 <is_button_pressed_1s>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d00b      	beq.n	800041e <fsm_for_input_processing+0x1d2>
				currMode = MODE1;
 8000406:	4b09      	ldr	r3, [pc, #36]	; (800042c <fsm_for_input_processing+0x1e0>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
//				saveBuffer_lightSeconds();

				M1_transition_function();
 800040c:	f000 f81c 	bl	8000448 <M1_transition_function>
			}

//			sevenLEDvalueToDisplay(0,4);
//			sevenLEDvalueToDisplay(1,lightSeconds_temp[2]);
			break;
 8000410:	e005      	b.n	800041e <fsm_for_input_processing+0x1d2>

		}
	}
 8000412:	bf00      	nop
 8000414:	e004      	b.n	8000420 <fsm_for_input_processing+0x1d4>
			break;
 8000416:	bf00      	nop
 8000418:	e002      	b.n	8000420 <fsm_for_input_processing+0x1d4>
			break;
 800041a:	bf00      	nop
 800041c:	e000      	b.n	8000420 <fsm_for_input_processing+0x1d4>
			break;
 800041e:	bf00      	nop

	TimerInterupt();
 8000420:	f000 f9ac 	bl	800077c <TimerInterupt>

}
 8000424:	bf00      	nop
 8000426:	bd80      	pop	{r7, pc}
 8000428:	200000b0 	.word	0x200000b0
 800042c:	20000064 	.word	0x20000064
 8000430:	20000018 	.word	0x20000018

08000434 <init_for_automatic_leds>:
void update_lightSeconds_to_counterTraffic(){
	counterTraffic[0]=lightSeconds[0];
	counterTraffic[1]=lightSeconds[2];
}
*/
void init_for_automatic_leds(){
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
	OffAllLED();
 8000438:	f000 f950 	bl	80006dc <OffAllLED>
	OnRed1();
 800043c:	f000 f8be 	bl	80005bc <OnRed1>
	OnGreen2();
 8000440:	f000 f92c 	bl	800069c <OnGreen2>
}
 8000444:	bf00      	nop
 8000446:	bd80      	pop	{r7, pc}

08000448 <M1_transition_function>:

void M1_transition_function(){
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
//	update_lightSeconds_to_counterTraffic();
	currM1State1=A_RED1;
 800044c:	4b04      	ldr	r3, [pc, #16]	; (8000460 <M1_transition_function+0x18>)
 800044e:	2200      	movs	r2, #0
 8000450:	701a      	strb	r2, [r3, #0]
	currM1State2=A_GREEN2;
 8000452:	4b04      	ldr	r3, [pc, #16]	; (8000464 <M1_transition_function+0x1c>)
 8000454:	2202      	movs	r2, #2
 8000456:	701a      	strb	r2, [r3, #0]
//	sevenLEDvalueToDisplay(0,counterTraffic[0]);
//	sevenLEDvalueToDisplay(1,counterTraffic[2]);
	init_for_automatic_leds();
 8000458:	f7ff ffec 	bl	8000434 <init_for_automatic_leds>
}
 800045c:	bf00      	nop
 800045e:	bd80      	pop	{r7, pc}
 8000460:	20000065 	.word	0x20000065
 8000464:	20000000 	.word	0x20000000

08000468 <button_reading>:
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];

static GPIO_TypeDef* button_ports[N0_OF_BUTTONS] = {A0_PedButton_GPIO_Port, A1_Button1_GPIO_Port, A2_Button2_GPIO_Port, A3_Button3_GPIO_Port};
static uint16_t button_pins[N0_OF_BUTTONS] = {A0_PedButton_Pin, A1_Button1_Pin, A2_Button2_Pin, A3_Button3_Pin};

void button_reading(){
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
	for (int i = 0; i < N0_OF_BUTTONS; i++) {
 800046e:	2300      	movs	r3, #0
 8000470:	607b      	str	r3, [r7, #4]
 8000472:	e059      	b.n	8000528 <button_reading+0xc0>
		debounceButtonBuffer2[i] =debounceButtonBuffer1[i];
 8000474:	4a30      	ldr	r2, [pc, #192]	; (8000538 <button_reading+0xd0>)
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	4413      	add	r3, r2
 800047a:	7819      	ldrb	r1, [r3, #0]
 800047c:	4a2f      	ldr	r2, [pc, #188]	; (800053c <button_reading+0xd4>)
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	4413      	add	r3, r2
 8000482:	460a      	mov	r2, r1
 8000484:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(button_ports[i], button_pins[i]);
 8000486:	4a2e      	ldr	r2, [pc, #184]	; (8000540 <button_reading+0xd8>)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800048e:	492d      	ldr	r1, [pc, #180]	; (8000544 <button_reading+0xdc>)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000496:	4619      	mov	r1, r3
 8000498:	4610      	mov	r0, r2
 800049a:	f000 fed9 	bl	8001250 <HAL_GPIO_ReadPin>
 800049e:	4603      	mov	r3, r0
 80004a0:	4619      	mov	r1, r3
 80004a2:	4a25      	ldr	r2, [pc, #148]	; (8000538 <button_reading+0xd0>)
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	4413      	add	r3, r2
 80004a8:	460a      	mov	r2, r1
 80004aa:	701a      	strb	r2, [r3, #0]
		if(debounceButtonBuffer1[i] == debounceButtonBuffer2[i])
 80004ac:	4a22      	ldr	r2, [pc, #136]	; (8000538 <button_reading+0xd0>)
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	4413      	add	r3, r2
 80004b2:	781a      	ldrb	r2, [r3, #0]
 80004b4:	4921      	ldr	r1, [pc, #132]	; (800053c <button_reading+0xd4>)
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	440b      	add	r3, r1
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	429a      	cmp	r2, r3
 80004be:	d108      	bne.n	80004d2 <button_reading+0x6a>
			buttonBuffer[i] = debounceButtonBuffer1[i];
 80004c0:	4a1d      	ldr	r2, [pc, #116]	; (8000538 <button_reading+0xd0>)
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	4413      	add	r3, r2
 80004c6:	7819      	ldrb	r1, [r3, #0]
 80004c8:	4a1f      	ldr	r2, [pc, #124]	; (8000548 <button_reading+0xe0>)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4413      	add	r3, r2
 80004ce:	460a      	mov	r2, r1
 80004d0:	701a      	strb	r2, [r3, #0]

		if(buttonBuffer[i] == BUTTON_IS_PRESSED) {
 80004d2:	4a1d      	ldr	r2, [pc, #116]	; (8000548 <button_reading+0xe0>)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	4413      	add	r3, r2
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d117      	bne.n	800050e <button_reading+0xa6>
			//if a button is pressed, we start counting
			if(counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING){
 80004de:	4a1b      	ldr	r2, [pc, #108]	; (800054c <button_reading+0xe4>)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80004ea:	d20a      	bcs.n	8000502 <button_reading+0x9a>
				counterForButtonPress1s[i]++;
 80004ec:	4a17      	ldr	r2, [pc, #92]	; (800054c <button_reading+0xe4>)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004f4:	3301      	adds	r3, #1
 80004f6:	b299      	uxth	r1, r3
 80004f8:	4a14      	ldr	r2, [pc, #80]	; (800054c <button_reading+0xe4>)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000500:	e00f      	b.n	8000522 <button_reading+0xba>
			} else {
				//the flag is turned on when 1 second has passed
				//since the button is pressed.
				flagForButtonPress1s[i] = 1;
 8000502:	4a13      	ldr	r2, [pc, #76]	; (8000550 <button_reading+0xe8>)
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	4413      	add	r3, r2
 8000508:	2201      	movs	r2, #1
 800050a:	701a      	strb	r2, [r3, #0]
 800050c:	e009      	b.n	8000522 <button_reading+0xba>
				//todo
			}
		} else {
			counterForButtonPress1s[i] = 0;
 800050e:	4a0f      	ldr	r2, [pc, #60]	; (800054c <button_reading+0xe4>)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	2100      	movs	r1, #0
 8000514:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForButtonPress1s[i] = 0;
 8000518:	4a0d      	ldr	r2, [pc, #52]	; (8000550 <button_reading+0xe8>)
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	4413      	add	r3, r2
 800051e:	2200      	movs	r2, #0
 8000520:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < N0_OF_BUTTONS; i++) {
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	3301      	adds	r3, #1
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	2b03      	cmp	r3, #3
 800052c:	dda2      	ble.n	8000474 <button_reading+0xc>
		}
	}
}
 800052e:	bf00      	nop
 8000530:	bf00      	nop
 8000532:	3708      	adds	r7, #8
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	2000006c 	.word	0x2000006c
 800053c:	20000070 	.word	0x20000070
 8000540:	20000024 	.word	0x20000024
 8000544:	20000034 	.word	0x20000034
 8000548:	20000068 	.word	0x20000068
 800054c:	20000078 	.word	0x20000078
 8000550:	20000074 	.word	0x20000074

08000554 <is_button_pressed>:

unsigned char is_button_pressed(uint8_t index){
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0;
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	2b03      	cmp	r3, #3
 8000562:	d901      	bls.n	8000568 <is_button_pressed+0x14>
 8000564:	2300      	movs	r3, #0
 8000566:	e007      	b.n	8000578 <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 8000568:	79fb      	ldrb	r3, [r7, #7]
 800056a:	4a06      	ldr	r2, [pc, #24]	; (8000584 <is_button_pressed+0x30>)
 800056c:	5cd3      	ldrb	r3, [r2, r3]
 800056e:	2b00      	cmp	r3, #0
 8000570:	bf0c      	ite	eq
 8000572:	2301      	moveq	r3, #1
 8000574:	2300      	movne	r3, #0
 8000576:	b2db      	uxtb	r3, r3
}
 8000578:	4618      	mov	r0, r3
 800057a:	370c      	adds	r7, #12
 800057c:	46bd      	mov	sp, r7
 800057e:	bc80      	pop	{r7}
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	20000068 	.word	0x20000068

08000588 <is_button_pressed_1s>:
unsigned char is_button_pressed_1s(unsigned char index){
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0xff;
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	2b03      	cmp	r3, #3
 8000596:	d901      	bls.n	800059c <is_button_pressed_1s+0x14>
 8000598:	23ff      	movs	r3, #255	; 0xff
 800059a:	e007      	b.n	80005ac <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1);
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	4a06      	ldr	r2, [pc, #24]	; (80005b8 <is_button_pressed_1s+0x30>)
 80005a0:	5cd3      	ldrb	r3, [r2, r3]
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	bf0c      	ite	eq
 80005a6:	2301      	moveq	r3, #1
 80005a8:	2300      	movne	r3, #0
 80005aa:	b2db      	uxtb	r3, r3
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bc80      	pop	{r7}
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	20000074 	.word	0x20000074

080005bc <OnRed1>:
    	OnEN_7SEG1(index);
	}

/*////////////////////////////////////////////////////////////////////////////////////

void OnRed1(){
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin (D2_LED1_GPIO_Port, D2_LED1_Pin, 1);
 80005c0:	2201      	movs	r2, #1
 80005c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005c6:	4805      	ldr	r0, [pc, #20]	; (80005dc <OnRed1+0x20>)
 80005c8:	f000 fe59 	bl	800127e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (D3_LED1_GPIO_Port, D3_LED1_Pin, 0);
 80005cc:	2200      	movs	r2, #0
 80005ce:	2108      	movs	r1, #8
 80005d0:	4803      	ldr	r0, [pc, #12]	; (80005e0 <OnRed1+0x24>)
 80005d2:	f000 fe54 	bl	800127e <HAL_GPIO_WritePin>
}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40010800 	.word	0x40010800
 80005e0:	40010c00 	.word	0x40010c00

080005e4 <OnYellow1>:
void OnYellow1(){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin (D2_LED1_GPIO_Port, D2_LED1_Pin, 1);
 80005e8:	2201      	movs	r2, #1
 80005ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005ee:	4805      	ldr	r0, [pc, #20]	; (8000604 <OnYellow1+0x20>)
 80005f0:	f000 fe45 	bl	800127e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (D3_LED1_GPIO_Port, D3_LED1_Pin, 1);
 80005f4:	2201      	movs	r2, #1
 80005f6:	2108      	movs	r1, #8
 80005f8:	4803      	ldr	r0, [pc, #12]	; (8000608 <OnYellow1+0x24>)
 80005fa:	f000 fe40 	bl	800127e <HAL_GPIO_WritePin>
}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40010800 	.word	0x40010800
 8000608:	40010c00 	.word	0x40010c00

0800060c <OnGreen1>:
void OnGreen1(){
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin (D2_LED1_GPIO_Port, D2_LED1_Pin, 0);
 8000610:	2200      	movs	r2, #0
 8000612:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000616:	4805      	ldr	r0, [pc, #20]	; (800062c <OnGreen1+0x20>)
 8000618:	f000 fe31 	bl	800127e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (D3_LED1_GPIO_Port, D3_LED1_Pin, 1);
 800061c:	2201      	movs	r2, #1
 800061e:	2108      	movs	r1, #8
 8000620:	4803      	ldr	r0, [pc, #12]	; (8000630 <OnGreen1+0x24>)
 8000622:	f000 fe2c 	bl	800127e <HAL_GPIO_WritePin>
}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40010800 	.word	0x40010800
 8000630:	40010c00 	.word	0x40010c00

08000634 <OffAllLED1>:

void OffAllLED1(){
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin (D2_LED1_GPIO_Port, D2_LED1_Pin, 0);
 8000638:	2200      	movs	r2, #0
 800063a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800063e:	4805      	ldr	r0, [pc, #20]	; (8000654 <OffAllLED1+0x20>)
 8000640:	f000 fe1d 	bl	800127e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (D3_LED1_GPIO_Port, D3_LED1_Pin, 0);
 8000644:	2200      	movs	r2, #0
 8000646:	2108      	movs	r1, #8
 8000648:	4803      	ldr	r0, [pc, #12]	; (8000658 <OffAllLED1+0x24>)
 800064a:	f000 fe18 	bl	800127e <HAL_GPIO_WritePin>
}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40010800 	.word	0x40010800
 8000658:	40010c00 	.word	0x40010c00

0800065c <OnRed2>:
/////////////////////////////////////////////////
void OnRed2(){
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin (D4_LED2_GPIO_Port, D4_LED2_Pin, 1);
 8000660:	2201      	movs	r2, #1
 8000662:	2120      	movs	r1, #32
 8000664:	4804      	ldr	r0, [pc, #16]	; (8000678 <OnRed2+0x1c>)
 8000666:	f000 fe0a 	bl	800127e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (D5_LED2_GPIO_Port, D5_LED2_Pin, 0);
 800066a:	2200      	movs	r2, #0
 800066c:	2110      	movs	r1, #16
 800066e:	4802      	ldr	r0, [pc, #8]	; (8000678 <OnRed2+0x1c>)
 8000670:	f000 fe05 	bl	800127e <HAL_GPIO_WritePin>
}
 8000674:	bf00      	nop
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40010c00 	.word	0x40010c00

0800067c <OnYellow2>:
void OnYellow2(){
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin (D4_LED2_GPIO_Port, D4_LED2_Pin, 1);
 8000680:	2201      	movs	r2, #1
 8000682:	2120      	movs	r1, #32
 8000684:	4804      	ldr	r0, [pc, #16]	; (8000698 <OnYellow2+0x1c>)
 8000686:	f000 fdfa 	bl	800127e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (D5_LED2_GPIO_Port, D5_LED2_Pin, 1);
 800068a:	2201      	movs	r2, #1
 800068c:	2110      	movs	r1, #16
 800068e:	4802      	ldr	r0, [pc, #8]	; (8000698 <OnYellow2+0x1c>)
 8000690:	f000 fdf5 	bl	800127e <HAL_GPIO_WritePin>
}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40010c00 	.word	0x40010c00

0800069c <OnGreen2>:
void OnGreen2(){
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin (D4_LED2_GPIO_Port, D4_LED2_Pin, 0);
 80006a0:	2200      	movs	r2, #0
 80006a2:	2120      	movs	r1, #32
 80006a4:	4804      	ldr	r0, [pc, #16]	; (80006b8 <OnGreen2+0x1c>)
 80006a6:	f000 fdea 	bl	800127e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (D5_LED2_GPIO_Port, D5_LED2_Pin, 1);
 80006aa:	2201      	movs	r2, #1
 80006ac:	2110      	movs	r1, #16
 80006ae:	4802      	ldr	r0, [pc, #8]	; (80006b8 <OnGreen2+0x1c>)
 80006b0:	f000 fde5 	bl	800127e <HAL_GPIO_WritePin>
}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40010c00 	.word	0x40010c00

080006bc <OffAllLED2>:

void OffAllLED2(){
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D4_LED2_GPIO_Port, D4_LED2_Pin, 0);
 80006c0:	2200      	movs	r2, #0
 80006c2:	2120      	movs	r1, #32
 80006c4:	4804      	ldr	r0, [pc, #16]	; (80006d8 <OffAllLED2+0x1c>)
 80006c6:	f000 fdda 	bl	800127e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D5_LED2_GPIO_Port, D5_LED2_Pin, 0);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2110      	movs	r1, #16
 80006ce:	4802      	ldr	r0, [pc, #8]	; (80006d8 <OffAllLED2+0x1c>)
 80006d0:	f000 fdd5 	bl	800127e <HAL_GPIO_WritePin>
}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40010c00 	.word	0x40010c00

080006dc <OffAllLED>:
/////////////////////////////////////////////////

void OffAllLED(){
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
	OffAllLED1();
 80006e0:	f7ff ffa8 	bl	8000634 <OffAllLED1>
	OffAllLED2();
 80006e4:	f7ff ffea 	bl	80006bc <OffAllLED2>
}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}

080006ec <ToggleAllRed>:
	  HAL_GPIO_WritePin (D13_PedBuzzer_GPIO_Port, D13_PedBuzzer_Pin, 0);
}
/*//////////*//////////////////////////////////////

int flag = 0;
void ToggleAllRed(){
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(LED_RED1_GPIO_Port, LED_RED1_Pin);
//	HAL_GPIO_TogglePin(LED_RED2_GPIO_Port, LED_RED2_Pin);
	if (flag == 0){
 80006f0:	4b09      	ldr	r3, [pc, #36]	; (8000718 <ToggleAllRed+0x2c>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d105      	bne.n	8000704 <ToggleAllRed+0x18>
		OffAllLED();
 80006f8:	f7ff fff0 	bl	80006dc <OffAllLED>
		flag = 1;
 80006fc:	4b06      	ldr	r3, [pc, #24]	; (8000718 <ToggleAllRed+0x2c>)
 80006fe:	2201      	movs	r2, #1
 8000700:	601a      	str	r2, [r3, #0]
	else{
		OnRed2();
		OnRed1();
		flag = 0;
	}
}
 8000702:	e006      	b.n	8000712 <ToggleAllRed+0x26>
		OnRed2();
 8000704:	f7ff ffaa 	bl	800065c <OnRed2>
		OnRed1();
 8000708:	f7ff ff58 	bl	80005bc <OnRed1>
		flag = 0;
 800070c:	4b02      	ldr	r3, [pc, #8]	; (8000718 <ToggleAllRed+0x2c>)
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000080 	.word	0x20000080

0800071c <ToggleAllYellow>:


void ToggleAllYellow(){
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin);
//	HAL_GPIO_TogglePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin);
	if (flag == 0){
 8000720:	4b09      	ldr	r3, [pc, #36]	; (8000748 <ToggleAllYellow+0x2c>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d105      	bne.n	8000734 <ToggleAllYellow+0x18>
		OffAllLED();
 8000728:	f7ff ffd8 	bl	80006dc <OffAllLED>
		flag = 1;
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <ToggleAllYellow+0x2c>)
 800072e:	2201      	movs	r2, #1
 8000730:	601a      	str	r2, [r3, #0]
	else{
		OnYellow2();
		OnYellow1();
		flag = 0;
	}
}
 8000732:	e006      	b.n	8000742 <ToggleAllYellow+0x26>
		OnYellow2();
 8000734:	f7ff ffa2 	bl	800067c <OnYellow2>
		OnYellow1();
 8000738:	f7ff ff54 	bl	80005e4 <OnYellow1>
		flag = 0;
 800073c:	4b02      	ldr	r3, [pc, #8]	; (8000748 <ToggleAllYellow+0x2c>)
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000080 	.word	0x20000080

0800074c <ToggleAllGreen>:


void ToggleAllGreen(){
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin);
//	HAL_GPIO_TogglePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin);
	if (flag == 0){
 8000750:	4b09      	ldr	r3, [pc, #36]	; (8000778 <ToggleAllGreen+0x2c>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d105      	bne.n	8000764 <ToggleAllGreen+0x18>
		OffAllLED();
 8000758:	f7ff ffc0 	bl	80006dc <OffAllLED>
		flag = 1;
 800075c:	4b06      	ldr	r3, [pc, #24]	; (8000778 <ToggleAllGreen+0x2c>)
 800075e:	2201      	movs	r2, #1
 8000760:	601a      	str	r2, [r3, #0]
	else{
		OnGreen2();
		OnGreen1();
		flag = 0;
	}
}
 8000762:	e006      	b.n	8000772 <ToggleAllGreen+0x26>
		OnGreen2();
 8000764:	f7ff ff9a 	bl	800069c <OnGreen2>
		OnGreen1();
 8000768:	f7ff ff50 	bl	800060c <OnGreen1>
		flag = 0;
 800076c:	4b02      	ldr	r3, [pc, #8]	; (8000778 <ToggleAllGreen+0x2c>)
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20000080 	.word	0x20000080

0800077c <TimerInterupt>:
}
/////////////////////////////////////////////////
int index_led=0;
const int sevenSegTimer=5;
const int LEDblinkingTimer=25;
void TimerInterupt(){
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
	if(timer_flag[0]==1){
 8000780:	4b1b      	ldr	r3, [pc, #108]	; (80007f0 <TimerInterupt+0x74>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	2b01      	cmp	r3, #1
 8000786:	d110      	bne.n	80007aa <TimerInterupt+0x2e>
		setTimer(0,sevenSegTimer);
 8000788:	2305      	movs	r3, #5
 800078a:	4619      	mov	r1, r3
 800078c:	2000      	movs	r0, #0
 800078e:	f000 f96f 	bl	8000a70 <setTimer>
		index_led++;
 8000792:	4b18      	ldr	r3, [pc, #96]	; (80007f4 <TimerInterupt+0x78>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	3301      	adds	r3, #1
 8000798:	4a16      	ldr	r2, [pc, #88]	; (80007f4 <TimerInterupt+0x78>)
 800079a:	6013      	str	r3, [r2, #0]
		if(index_led>1){
 800079c:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <TimerInterupt+0x78>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	dd02      	ble.n	80007aa <TimerInterupt+0x2e>
			index_led=0;
 80007a4:	4b13      	ldr	r3, [pc, #76]	; (80007f4 <TimerInterupt+0x78>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer_flag[2]==1){
 80007aa:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <TimerInterupt+0x74>)
 80007ac:	689b      	ldr	r3, [r3, #8]
 80007ae:	2b01      	cmp	r3, #1
 80007b0:	d118      	bne.n	80007e4 <TimerInterupt+0x68>
		setTimer(2,LEDblinkingTimer);
 80007b2:	2319      	movs	r3, #25
 80007b4:	4619      	mov	r1, r3
 80007b6:	2002      	movs	r0, #2
 80007b8:	f000 f95a 	bl	8000a70 <setTimer>
		switch(currMode){
 80007bc:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <TimerInterupt+0x7c>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	2b03      	cmp	r3, #3
 80007c2:	d00c      	beq.n	80007de <TimerInterupt+0x62>
 80007c4:	2b03      	cmp	r3, #3
 80007c6:	dc0f      	bgt.n	80007e8 <TimerInterupt+0x6c>
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d002      	beq.n	80007d2 <TimerInterupt+0x56>
 80007cc:	2b02      	cmp	r3, #2
 80007ce:	d003      	beq.n	80007d8 <TimerInterupt+0x5c>
				break;
			case MODE4:
				ToggleAllGreen();
				break;
			default:
				break;
 80007d0:	e00a      	b.n	80007e8 <TimerInterupt+0x6c>
				ToggleAllRed();
 80007d2:	f7ff ff8b 	bl	80006ec <ToggleAllRed>
				break;
 80007d6:	e008      	b.n	80007ea <TimerInterupt+0x6e>
				ToggleAllYellow();
 80007d8:	f7ff ffa0 	bl	800071c <ToggleAllYellow>
				break;
 80007dc:	e005      	b.n	80007ea <TimerInterupt+0x6e>
				ToggleAllGreen();
 80007de:	f7ff ffb5 	bl	800074c <ToggleAllGreen>
				break;
 80007e2:	e002      	b.n	80007ea <TimerInterupt+0x6e>
		}
	}
 80007e4:	bf00      	nop
 80007e6:	e000      	b.n	80007ea <TimerInterupt+0x6e>
				break;
 80007e8:	bf00      	nop
}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	200000b0 	.word	0x200000b0
 80007f4:	20000084 	.word	0x20000084
 80007f8:	20000064 	.word	0x20000064

080007fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000802:	f000 fa31 	bl	8000c68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000806:	f000 f825 	bl	8000854 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800080a:	f000 f8b1 	bl	8000970 <MX_GPIO_Init>
  MX_TIM2_Init();
 800080e:	f000 f863 	bl	80008d8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000812:	480f      	ldr	r0, [pc, #60]	; (8000850 <main+0x54>)
 8000814:	f001 f978 	bl	8001b08 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  const int sevenSegTimer=25;
 8000818:	2319      	movs	r3, #25
 800081a:	607b      	str	r3, [r7, #4]
  setTimer(0,sevenSegTimer);
 800081c:	6879      	ldr	r1, [r7, #4]
 800081e:	2000      	movs	r0, #0
 8000820:	f000 f926 	bl	8000a70 <setTimer>
  setTimer(1,30);
 8000824:	211e      	movs	r1, #30
 8000826:	2001      	movs	r0, #1
 8000828:	f000 f922 	bl	8000a70 <setTimer>
  setTimer(2,25);
 800082c:	2119      	movs	r1, #25
 800082e:	2002      	movs	r0, #2
 8000830:	f000 f91e 	bl	8000a70 <setTimer>
  setTimer(3,100);
 8000834:	2164      	movs	r1, #100	; 0x64
 8000836:	2003      	movs	r0, #3
 8000838:	f000 f91a 	bl	8000a70 <setTimer>
  setTimer(4,30);
 800083c:	211e      	movs	r1, #30
 800083e:	2004      	movs	r0, #4
 8000840:	f000 f916 	bl	8000a70 <setTimer>
//  int p_flag=0;
  init_for_automatic_leds();
 8000844:	f7ff fdf6 	bl	8000434 <init_for_automatic_leds>
  while (1)
  {
	  fsm_for_input_processing();
 8000848:	f7ff fd00 	bl	800024c <fsm_for_input_processing>
 800084c:	e7fc      	b.n	8000848 <main+0x4c>
 800084e:	bf00      	nop
 8000850:	200000d8 	.word	0x200000d8

08000854 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b090      	sub	sp, #64	; 0x40
 8000858:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085a:	f107 0318 	add.w	r3, r7, #24
 800085e:	2228      	movs	r2, #40	; 0x28
 8000860:	2100      	movs	r1, #0
 8000862:	4618      	mov	r0, r3
 8000864:	f001 fd22 	bl	80022ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
 8000874:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000876:	2302      	movs	r3, #2
 8000878:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800087a:	2301      	movs	r3, #1
 800087c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800087e:	2310      	movs	r3, #16
 8000880:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000882:	2302      	movs	r3, #2
 8000884:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000886:	2300      	movs	r3, #0
 8000888:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800088a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800088e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000890:	f107 0318 	add.w	r3, r7, #24
 8000894:	4618      	mov	r0, r3
 8000896:	f000 fd0b 	bl	80012b0 <HAL_RCC_OscConfig>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80008a0:	f000 f8e0 	bl	8000a64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a4:	230f      	movs	r3, #15
 80008a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a8:	2302      	movs	r3, #2
 80008aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ac:	2300      	movs	r3, #0
 80008ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008b6:	2300      	movs	r3, #0
 80008b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	2102      	movs	r1, #2
 80008be:	4618      	mov	r0, r3
 80008c0:	f000 ff76 	bl	80017b0 <HAL_RCC_ClockConfig>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80008ca:	f000 f8cb 	bl	8000a64 <Error_Handler>
  }
}
 80008ce:	bf00      	nop
 80008d0:	3740      	adds	r7, #64	; 0x40
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
	...

080008d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b086      	sub	sp, #24
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008de:	f107 0308 	add.w	r3, r7, #8
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ec:	463b      	mov	r3, r7
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008f4:	4b1d      	ldr	r3, [pc, #116]	; (800096c <MX_TIM2_Init+0x94>)
 80008f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 80008fc:	4b1b      	ldr	r3, [pc, #108]	; (800096c <MX_TIM2_Init+0x94>)
 80008fe:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000902:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000904:	4b19      	ldr	r3, [pc, #100]	; (800096c <MX_TIM2_Init+0x94>)
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800090a:	4b18      	ldr	r3, [pc, #96]	; (800096c <MX_TIM2_Init+0x94>)
 800090c:	2209      	movs	r2, #9
 800090e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000910:	4b16      	ldr	r3, [pc, #88]	; (800096c <MX_TIM2_Init+0x94>)
 8000912:	2200      	movs	r2, #0
 8000914:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000916:	4b15      	ldr	r3, [pc, #84]	; (800096c <MX_TIM2_Init+0x94>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800091c:	4813      	ldr	r0, [pc, #76]	; (800096c <MX_TIM2_Init+0x94>)
 800091e:	f001 f8a3 	bl	8001a68 <HAL_TIM_Base_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000928:	f000 f89c 	bl	8000a64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800092c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000930:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000932:	f107 0308 	add.w	r3, r7, #8
 8000936:	4619      	mov	r1, r3
 8000938:	480c      	ldr	r0, [pc, #48]	; (800096c <MX_TIM2_Init+0x94>)
 800093a:	f001 fa3f 	bl	8001dbc <HAL_TIM_ConfigClockSource>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000944:	f000 f88e 	bl	8000a64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000948:	2300      	movs	r3, #0
 800094a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800094c:	2300      	movs	r3, #0
 800094e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000950:	463b      	mov	r3, r7
 8000952:	4619      	mov	r1, r3
 8000954:	4805      	ldr	r0, [pc, #20]	; (800096c <MX_TIM2_Init+0x94>)
 8000956:	f001 fc15 	bl	8002184 <HAL_TIMEx_MasterConfigSynchronization>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000960:	f000 f880 	bl	8000a64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000964:	bf00      	nop
 8000966:	3718      	adds	r7, #24
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	200000d8 	.word	0x200000d8

08000970 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000976:	f107 0308 	add.w	r3, r7, #8
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000984:	4b2e      	ldr	r3, [pc, #184]	; (8000a40 <MX_GPIO_Init+0xd0>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	4a2d      	ldr	r2, [pc, #180]	; (8000a40 <MX_GPIO_Init+0xd0>)
 800098a:	f043 0304 	orr.w	r3, r3, #4
 800098e:	6193      	str	r3, [r2, #24]
 8000990:	4b2b      	ldr	r3, [pc, #172]	; (8000a40 <MX_GPIO_Init+0xd0>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	f003 0304 	and.w	r3, r3, #4
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800099c:	4b28      	ldr	r3, [pc, #160]	; (8000a40 <MX_GPIO_Init+0xd0>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	4a27      	ldr	r2, [pc, #156]	; (8000a40 <MX_GPIO_Init+0xd0>)
 80009a2:	f043 0308 	orr.w	r3, r3, #8
 80009a6:	6193      	str	r3, [r2, #24]
 80009a8:	4b25      	ldr	r3, [pc, #148]	; (8000a40 <MX_GPIO_Init+0xd0>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	f003 0308 	and.w	r3, r3, #8
 80009b0:	603b      	str	r3, [r7, #0]
 80009b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D13_PedBuzzer_Pin|D12_PedBuzzer_Pin|D7_PedLED_Pin|D2_LED1_Pin, GPIO_PIN_RESET);
 80009b4:	2200      	movs	r2, #0
 80009b6:	f44f 61ac 	mov.w	r1, #1376	; 0x560
 80009ba:	4822      	ldr	r0, [pc, #136]	; (8000a44 <MX_GPIO_Init+0xd4>)
 80009bc:	f000 fc5f 	bl	800127e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_PedLED_Pin|D3_LED1_Pin|D5_LED2_Pin|D4_LED2_Pin, GPIO_PIN_RESET);
 80009c0:	2200      	movs	r2, #0
 80009c2:	f44f 6187 	mov.w	r1, #1080	; 0x438
 80009c6:	4820      	ldr	r0, [pc, #128]	; (8000a48 <MX_GPIO_Init+0xd8>)
 80009c8:	f000 fc59 	bl	800127e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_PedButton_Pin A1_Button1_Pin A2_Button2_Pin */
  GPIO_InitStruct.Pin = A0_PedButton_Pin|A1_Button1_Pin|A2_Button2_Pin;
 80009cc:	2313      	movs	r3, #19
 80009ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d0:	2300      	movs	r3, #0
 80009d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d8:	f107 0308 	add.w	r3, r7, #8
 80009dc:	4619      	mov	r1, r3
 80009de:	4819      	ldr	r0, [pc, #100]	; (8000a44 <MX_GPIO_Init+0xd4>)
 80009e0:	f000 fab2 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_PedBuzzer_Pin D12_PedBuzzer_Pin D7_PedLED_Pin D2_LED1_Pin */
  GPIO_InitStruct.Pin = D13_PedBuzzer_Pin|D12_PedBuzzer_Pin|D7_PedLED_Pin|D2_LED1_Pin;
 80009e4:	f44f 63ac 	mov.w	r3, #1376	; 0x560
 80009e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ea:	2301      	movs	r3, #1
 80009ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f2:	2302      	movs	r3, #2
 80009f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f6:	f107 0308 	add.w	r3, r7, #8
 80009fa:	4619      	mov	r1, r3
 80009fc:	4811      	ldr	r0, [pc, #68]	; (8000a44 <MX_GPIO_Init+0xd4>)
 80009fe:	f000 faa3 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : A3_Button3_Pin */
  GPIO_InitStruct.Pin = A3_Button3_Pin;
 8000a02:	2301      	movs	r3, #1
 8000a04:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(A3_Button3_GPIO_Port, &GPIO_InitStruct);
 8000a0e:	f107 0308 	add.w	r3, r7, #8
 8000a12:	4619      	mov	r1, r3
 8000a14:	480c      	ldr	r0, [pc, #48]	; (8000a48 <MX_GPIO_Init+0xd8>)
 8000a16:	f000 fa97 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_PedLED_Pin D3_LED1_Pin D5_LED2_Pin D4_LED2_Pin */
  GPIO_InitStruct.Pin = D6_PedLED_Pin|D3_LED1_Pin|D5_LED2_Pin|D4_LED2_Pin;
 8000a1a:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000a1e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a20:	2301      	movs	r3, #1
 8000a22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a2c:	f107 0308 	add.w	r3, r7, #8
 8000a30:	4619      	mov	r1, r3
 8000a32:	4805      	ldr	r0, [pc, #20]	; (8000a48 <MX_GPIO_Init+0xd8>)
 8000a34:	f000 fa88 	bl	8000f48 <HAL_GPIO_Init>

}
 8000a38:	bf00      	nop
 8000a3a:	3718      	adds	r7, #24
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40021000 	.word	0x40021000
 8000a44:	40010800 	.word	0x40010800
 8000a48:	40010c00 	.word	0x40010c00

08000a4c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
	timerRun();
 8000a54:	f000 f824 	bl	8000aa0 <timerRun>
	button_reading();
 8000a58:	f7ff fd06 	bl	8000468 <button_reading>
}
 8000a5c:	bf00      	nop
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a68:	b672      	cpsid	i
}
 8000a6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a6c:	e7fe      	b.n	8000a6c <Error_Handler+0x8>
	...

08000a70 <setTimer>:

#define TIMERNUM 10
int timer_counter[TIMERNUM]={0,0,0,0,0,0,0,0,0,0};
int timer_flag[TIMERNUM]={0,0,0,0,0,0,0,0,0,0};

void setTimer(int INDEX,int duration){
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	6039      	str	r1, [r7, #0]
	timer_counter[INDEX]=duration;
 8000a7a:	4907      	ldr	r1, [pc, #28]	; (8000a98 <setTimer+0x28>)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	683a      	ldr	r2, [r7, #0]
 8000a80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[INDEX]=0;
 8000a84:	4a05      	ldr	r2, [pc, #20]	; (8000a9c <setTimer+0x2c>)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2100      	movs	r1, #0
 8000a8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000a8e:	bf00      	nop
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr
 8000a98:	20000088 	.word	0x20000088
 8000a9c:	200000b0 	.word	0x200000b0

08000aa0 <timerRun>:

void timerRun(){
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
	for(int i=0;i<TIMERNUM;i++){
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	607b      	str	r3, [r7, #4]
 8000aaa:	e01c      	b.n	8000ae6 <timerRun+0x46>
		if(timer_counter[i] > 0){
 8000aac:	4a12      	ldr	r2, [pc, #72]	; (8000af8 <timerRun+0x58>)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	dd13      	ble.n	8000ae0 <timerRun+0x40>
			timer_counter[i]--;
 8000ab8:	4a0f      	ldr	r2, [pc, #60]	; (8000af8 <timerRun+0x58>)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ac0:	1e5a      	subs	r2, r3, #1
 8000ac2:	490d      	ldr	r1, [pc, #52]	; (8000af8 <timerRun+0x58>)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] <=0){
 8000aca:	4a0b      	ldr	r2, [pc, #44]	; (8000af8 <timerRun+0x58>)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	dc04      	bgt.n	8000ae0 <timerRun+0x40>
				timer_flag[i]=1;
 8000ad6:	4a09      	ldr	r2, [pc, #36]	; (8000afc <timerRun+0x5c>)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2101      	movs	r1, #1
 8000adc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0;i<TIMERNUM;i++){
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2b09      	cmp	r3, #9
 8000aea:	dddf      	ble.n	8000aac <timerRun+0xc>
			}
		}
	}
}
 8000aec:	bf00      	nop
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr
 8000af8:	20000088 	.word	0x20000088
 8000afc:	200000b0 	.word	0x200000b0

08000b00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b06:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <HAL_MspInit+0x5c>)
 8000b08:	699b      	ldr	r3, [r3, #24]
 8000b0a:	4a14      	ldr	r2, [pc, #80]	; (8000b5c <HAL_MspInit+0x5c>)
 8000b0c:	f043 0301 	orr.w	r3, r3, #1
 8000b10:	6193      	str	r3, [r2, #24]
 8000b12:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <HAL_MspInit+0x5c>)
 8000b14:	699b      	ldr	r3, [r3, #24]
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	60bb      	str	r3, [r7, #8]
 8000b1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1e:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <HAL_MspInit+0x5c>)
 8000b20:	69db      	ldr	r3, [r3, #28]
 8000b22:	4a0e      	ldr	r2, [pc, #56]	; (8000b5c <HAL_MspInit+0x5c>)
 8000b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b28:	61d3      	str	r3, [r2, #28]
 8000b2a:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <HAL_MspInit+0x5c>)
 8000b2c:	69db      	ldr	r3, [r3, #28]
 8000b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b36:	4b0a      	ldr	r3, [pc, #40]	; (8000b60 <HAL_MspInit+0x60>)
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	4a04      	ldr	r2, [pc, #16]	; (8000b60 <HAL_MspInit+0x60>)
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b52:	bf00      	nop
 8000b54:	3714      	adds	r7, #20
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bc80      	pop	{r7}
 8000b5a:	4770      	bx	lr
 8000b5c:	40021000 	.word	0x40021000
 8000b60:	40010000 	.word	0x40010000

08000b64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b74:	d113      	bne.n	8000b9e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b76:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <HAL_TIM_Base_MspInit+0x44>)
 8000b78:	69db      	ldr	r3, [r3, #28]
 8000b7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ba8 <HAL_TIM_Base_MspInit+0x44>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	61d3      	str	r3, [r2, #28]
 8000b82:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <HAL_TIM_Base_MspInit+0x44>)
 8000b84:	69db      	ldr	r3, [r3, #28]
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2100      	movs	r1, #0
 8000b92:	201c      	movs	r0, #28
 8000b94:	f000 f9a1 	bl	8000eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b98:	201c      	movs	r0, #28
 8000b9a:	f000 f9ba 	bl	8000f12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b9e:	bf00      	nop
 8000ba0:	3710      	adds	r7, #16
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40021000 	.word	0x40021000

08000bac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <NMI_Handler+0x4>

08000bb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb6:	e7fe      	b.n	8000bb6 <HardFault_Handler+0x4>

08000bb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <MemManage_Handler+0x4>

08000bbe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc2:	e7fe      	b.n	8000bc2 <BusFault_Handler+0x4>

08000bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <UsageFault_Handler+0x4>

08000bca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bc80      	pop	{r7}
 8000bd4:	4770      	bx	lr

08000bd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bc80      	pop	{r7}
 8000be0:	4770      	bx	lr

08000be2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bc80      	pop	{r7}
 8000bec:	4770      	bx	lr

08000bee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf2:	f000 f87f 	bl	8000cf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
	...

08000bfc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c00:	4802      	ldr	r0, [pc, #8]	; (8000c0c <TIM2_IRQHandler+0x10>)
 8000c02:	f000 ffd3 	bl	8001bac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	200000d8 	.word	0x200000d8

08000c10 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bc80      	pop	{r7}
 8000c1a:	4770      	bx	lr

08000c1c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c1c:	f7ff fff8 	bl	8000c10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c20:	480b      	ldr	r0, [pc, #44]	; (8000c50 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c22:	490c      	ldr	r1, [pc, #48]	; (8000c54 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c24:	4a0c      	ldr	r2, [pc, #48]	; (8000c58 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c28:	e002      	b.n	8000c30 <LoopCopyDataInit>

08000c2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c2e:	3304      	adds	r3, #4

08000c30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c34:	d3f9      	bcc.n	8000c2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c36:	4a09      	ldr	r2, [pc, #36]	; (8000c5c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c38:	4c09      	ldr	r4, [pc, #36]	; (8000c60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c3c:	e001      	b.n	8000c42 <LoopFillZerobss>

08000c3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c40:	3204      	adds	r2, #4

08000c42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c44:	d3fb      	bcc.n	8000c3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c46:	f001 fb0d 	bl	8002264 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c4a:	f7ff fdd7 	bl	80007fc <main>
  bx lr
 8000c4e:	4770      	bx	lr
  ldr r0, =_sdata
 8000c50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c54:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 8000c58:	08002300 	.word	0x08002300
  ldr r2, =_sbss
 8000c5c:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 8000c60:	20000124 	.word	0x20000124

08000c64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c64:	e7fe      	b.n	8000c64 <ADC1_2_IRQHandler>
	...

08000c68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <HAL_Init+0x28>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a07      	ldr	r2, [pc, #28]	; (8000c90 <HAL_Init+0x28>)
 8000c72:	f043 0310 	orr.w	r3, r3, #16
 8000c76:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c78:	2003      	movs	r0, #3
 8000c7a:	f000 f923 	bl	8000ec4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c7e:	200f      	movs	r0, #15
 8000c80:	f000 f808 	bl	8000c94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c84:	f7ff ff3c 	bl	8000b00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40022000 	.word	0x40022000

08000c94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c9c:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <HAL_InitTick+0x54>)
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	4b12      	ldr	r3, [pc, #72]	; (8000cec <HAL_InitTick+0x58>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000caa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f000 f93b 	bl	8000f2e <HAL_SYSTICK_Config>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e00e      	b.n	8000ce0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2b0f      	cmp	r3, #15
 8000cc6:	d80a      	bhi.n	8000cde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	6879      	ldr	r1, [r7, #4]
 8000ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd0:	f000 f903 	bl	8000eda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cd4:	4a06      	ldr	r2, [pc, #24]	; (8000cf0 <HAL_InitTick+0x5c>)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	e000      	b.n	8000ce0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	2000003c 	.word	0x2000003c
 8000cec:	20000044 	.word	0x20000044
 8000cf0:	20000040 	.word	0x20000040

08000cf4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cf8:	4b05      	ldr	r3, [pc, #20]	; (8000d10 <HAL_IncTick+0x1c>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	4b05      	ldr	r3, [pc, #20]	; (8000d14 <HAL_IncTick+0x20>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4413      	add	r3, r2
 8000d04:	4a03      	ldr	r2, [pc, #12]	; (8000d14 <HAL_IncTick+0x20>)
 8000d06:	6013      	str	r3, [r2, #0]
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr
 8000d10:	20000044 	.word	0x20000044
 8000d14:	20000120 	.word	0x20000120

08000d18 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d1c:	4b02      	ldr	r3, [pc, #8]	; (8000d28 <HAL_GetTick+0x10>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr
 8000d28:	20000120 	.word	0x20000120

08000d2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f003 0307 	and.w	r3, r3, #7
 8000d3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <__NVIC_SetPriorityGrouping+0x44>)
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d42:	68ba      	ldr	r2, [r7, #8]
 8000d44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d48:	4013      	ands	r3, r2
 8000d4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d5e:	4a04      	ldr	r2, [pc, #16]	; (8000d70 <__NVIC_SetPriorityGrouping+0x44>)
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	60d3      	str	r3, [r2, #12]
}
 8000d64:	bf00      	nop
 8000d66:	3714      	adds	r7, #20
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bc80      	pop	{r7}
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d78:	4b04      	ldr	r3, [pc, #16]	; (8000d8c <__NVIC_GetPriorityGrouping+0x18>)
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	0a1b      	lsrs	r3, r3, #8
 8000d7e:	f003 0307 	and.w	r3, r3, #7
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bc80      	pop	{r7}
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	db0b      	blt.n	8000dba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	f003 021f 	and.w	r2, r3, #31
 8000da8:	4906      	ldr	r1, [pc, #24]	; (8000dc4 <__NVIC_EnableIRQ+0x34>)
 8000daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dae:	095b      	lsrs	r3, r3, #5
 8000db0:	2001      	movs	r0, #1
 8000db2:	fa00 f202 	lsl.w	r2, r0, r2
 8000db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dba:	bf00      	nop
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bc80      	pop	{r7}
 8000dc2:	4770      	bx	lr
 8000dc4:	e000e100 	.word	0xe000e100

08000dc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	6039      	str	r1, [r7, #0]
 8000dd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	db0a      	blt.n	8000df2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	490c      	ldr	r1, [pc, #48]	; (8000e14 <__NVIC_SetPriority+0x4c>)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	0112      	lsls	r2, r2, #4
 8000de8:	b2d2      	uxtb	r2, r2
 8000dea:	440b      	add	r3, r1
 8000dec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df0:	e00a      	b.n	8000e08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	b2da      	uxtb	r2, r3
 8000df6:	4908      	ldr	r1, [pc, #32]	; (8000e18 <__NVIC_SetPriority+0x50>)
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	f003 030f 	and.w	r3, r3, #15
 8000dfe:	3b04      	subs	r3, #4
 8000e00:	0112      	lsls	r2, r2, #4
 8000e02:	b2d2      	uxtb	r2, r2
 8000e04:	440b      	add	r3, r1
 8000e06:	761a      	strb	r2, [r3, #24]
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bc80      	pop	{r7}
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	e000e100 	.word	0xe000e100
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b089      	sub	sp, #36	; 0x24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	f1c3 0307 	rsb	r3, r3, #7
 8000e36:	2b04      	cmp	r3, #4
 8000e38:	bf28      	it	cs
 8000e3a:	2304      	movcs	r3, #4
 8000e3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	3304      	adds	r3, #4
 8000e42:	2b06      	cmp	r3, #6
 8000e44:	d902      	bls.n	8000e4c <NVIC_EncodePriority+0x30>
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	3b03      	subs	r3, #3
 8000e4a:	e000      	b.n	8000e4e <NVIC_EncodePriority+0x32>
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e50:	f04f 32ff 	mov.w	r2, #4294967295
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43da      	mvns	r2, r3
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	401a      	ands	r2, r3
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e64:	f04f 31ff 	mov.w	r1, #4294967295
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6e:	43d9      	mvns	r1, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e74:	4313      	orrs	r3, r2
         );
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3724      	adds	r7, #36	; 0x24
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bc80      	pop	{r7}
 8000e7e:	4770      	bx	lr

08000e80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e90:	d301      	bcc.n	8000e96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e92:	2301      	movs	r3, #1
 8000e94:	e00f      	b.n	8000eb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e96:	4a0a      	ldr	r2, [pc, #40]	; (8000ec0 <SysTick_Config+0x40>)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e9e:	210f      	movs	r1, #15
 8000ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea4:	f7ff ff90 	bl	8000dc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea8:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <SysTick_Config+0x40>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eae:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <SysTick_Config+0x40>)
 8000eb0:	2207      	movs	r2, #7
 8000eb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	e000e010 	.word	0xe000e010

08000ec4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f7ff ff2d 	bl	8000d2c <__NVIC_SetPriorityGrouping>
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b086      	sub	sp, #24
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	60b9      	str	r1, [r7, #8]
 8000ee4:	607a      	str	r2, [r7, #4]
 8000ee6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eec:	f7ff ff42 	bl	8000d74 <__NVIC_GetPriorityGrouping>
 8000ef0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	68b9      	ldr	r1, [r7, #8]
 8000ef6:	6978      	ldr	r0, [r7, #20]
 8000ef8:	f7ff ff90 	bl	8000e1c <NVIC_EncodePriority>
 8000efc:	4602      	mov	r2, r0
 8000efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f02:	4611      	mov	r1, r2
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff ff5f 	bl	8000dc8 <__NVIC_SetPriority>
}
 8000f0a:	bf00      	nop
 8000f0c:	3718      	adds	r7, #24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b082      	sub	sp, #8
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	4603      	mov	r3, r0
 8000f1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff ff35 	bl	8000d90 <__NVIC_EnableIRQ>
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b082      	sub	sp, #8
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f7ff ffa2 	bl	8000e80 <SysTick_Config>
 8000f3c:	4603      	mov	r3, r0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
	...

08000f48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b08b      	sub	sp, #44	; 0x2c
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f52:	2300      	movs	r3, #0
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f56:	2300      	movs	r3, #0
 8000f58:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f5a:	e169      	b.n	8001230 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	69fa      	ldr	r2, [r7, #28]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	f040 8158 	bne.w	800122a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	4a9a      	ldr	r2, [pc, #616]	; (80011e8 <HAL_GPIO_Init+0x2a0>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d05e      	beq.n	8001042 <HAL_GPIO_Init+0xfa>
 8000f84:	4a98      	ldr	r2, [pc, #608]	; (80011e8 <HAL_GPIO_Init+0x2a0>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d875      	bhi.n	8001076 <HAL_GPIO_Init+0x12e>
 8000f8a:	4a98      	ldr	r2, [pc, #608]	; (80011ec <HAL_GPIO_Init+0x2a4>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d058      	beq.n	8001042 <HAL_GPIO_Init+0xfa>
 8000f90:	4a96      	ldr	r2, [pc, #600]	; (80011ec <HAL_GPIO_Init+0x2a4>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d86f      	bhi.n	8001076 <HAL_GPIO_Init+0x12e>
 8000f96:	4a96      	ldr	r2, [pc, #600]	; (80011f0 <HAL_GPIO_Init+0x2a8>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d052      	beq.n	8001042 <HAL_GPIO_Init+0xfa>
 8000f9c:	4a94      	ldr	r2, [pc, #592]	; (80011f0 <HAL_GPIO_Init+0x2a8>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d869      	bhi.n	8001076 <HAL_GPIO_Init+0x12e>
 8000fa2:	4a94      	ldr	r2, [pc, #592]	; (80011f4 <HAL_GPIO_Init+0x2ac>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d04c      	beq.n	8001042 <HAL_GPIO_Init+0xfa>
 8000fa8:	4a92      	ldr	r2, [pc, #584]	; (80011f4 <HAL_GPIO_Init+0x2ac>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d863      	bhi.n	8001076 <HAL_GPIO_Init+0x12e>
 8000fae:	4a92      	ldr	r2, [pc, #584]	; (80011f8 <HAL_GPIO_Init+0x2b0>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d046      	beq.n	8001042 <HAL_GPIO_Init+0xfa>
 8000fb4:	4a90      	ldr	r2, [pc, #576]	; (80011f8 <HAL_GPIO_Init+0x2b0>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d85d      	bhi.n	8001076 <HAL_GPIO_Init+0x12e>
 8000fba:	2b12      	cmp	r3, #18
 8000fbc:	d82a      	bhi.n	8001014 <HAL_GPIO_Init+0xcc>
 8000fbe:	2b12      	cmp	r3, #18
 8000fc0:	d859      	bhi.n	8001076 <HAL_GPIO_Init+0x12e>
 8000fc2:	a201      	add	r2, pc, #4	; (adr r2, 8000fc8 <HAL_GPIO_Init+0x80>)
 8000fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fc8:	08001043 	.word	0x08001043
 8000fcc:	0800101d 	.word	0x0800101d
 8000fd0:	0800102f 	.word	0x0800102f
 8000fd4:	08001071 	.word	0x08001071
 8000fd8:	08001077 	.word	0x08001077
 8000fdc:	08001077 	.word	0x08001077
 8000fe0:	08001077 	.word	0x08001077
 8000fe4:	08001077 	.word	0x08001077
 8000fe8:	08001077 	.word	0x08001077
 8000fec:	08001077 	.word	0x08001077
 8000ff0:	08001077 	.word	0x08001077
 8000ff4:	08001077 	.word	0x08001077
 8000ff8:	08001077 	.word	0x08001077
 8000ffc:	08001077 	.word	0x08001077
 8001000:	08001077 	.word	0x08001077
 8001004:	08001077 	.word	0x08001077
 8001008:	08001077 	.word	0x08001077
 800100c:	08001025 	.word	0x08001025
 8001010:	08001039 	.word	0x08001039
 8001014:	4a79      	ldr	r2, [pc, #484]	; (80011fc <HAL_GPIO_Init+0x2b4>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d013      	beq.n	8001042 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800101a:	e02c      	b.n	8001076 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	623b      	str	r3, [r7, #32]
          break;
 8001022:	e029      	b.n	8001078 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	3304      	adds	r3, #4
 800102a:	623b      	str	r3, [r7, #32]
          break;
 800102c:	e024      	b.n	8001078 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	3308      	adds	r3, #8
 8001034:	623b      	str	r3, [r7, #32]
          break;
 8001036:	e01f      	b.n	8001078 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	330c      	adds	r3, #12
 800103e:	623b      	str	r3, [r7, #32]
          break;
 8001040:	e01a      	b.n	8001078 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d102      	bne.n	8001050 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800104a:	2304      	movs	r3, #4
 800104c:	623b      	str	r3, [r7, #32]
          break;
 800104e:	e013      	b.n	8001078 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d105      	bne.n	8001064 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001058:	2308      	movs	r3, #8
 800105a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	69fa      	ldr	r2, [r7, #28]
 8001060:	611a      	str	r2, [r3, #16]
          break;
 8001062:	e009      	b.n	8001078 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001064:	2308      	movs	r3, #8
 8001066:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	69fa      	ldr	r2, [r7, #28]
 800106c:	615a      	str	r2, [r3, #20]
          break;
 800106e:	e003      	b.n	8001078 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001070:	2300      	movs	r3, #0
 8001072:	623b      	str	r3, [r7, #32]
          break;
 8001074:	e000      	b.n	8001078 <HAL_GPIO_Init+0x130>
          break;
 8001076:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	2bff      	cmp	r3, #255	; 0xff
 800107c:	d801      	bhi.n	8001082 <HAL_GPIO_Init+0x13a>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	e001      	b.n	8001086 <HAL_GPIO_Init+0x13e>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	3304      	adds	r3, #4
 8001086:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	2bff      	cmp	r3, #255	; 0xff
 800108c:	d802      	bhi.n	8001094 <HAL_GPIO_Init+0x14c>
 800108e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	e002      	b.n	800109a <HAL_GPIO_Init+0x152>
 8001094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001096:	3b08      	subs	r3, #8
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	210f      	movs	r1, #15
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	fa01 f303 	lsl.w	r3, r1, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	401a      	ands	r2, r3
 80010ac:	6a39      	ldr	r1, [r7, #32]
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	fa01 f303 	lsl.w	r3, r1, r3
 80010b4:	431a      	orrs	r2, r3
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	f000 80b1 	beq.w	800122a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010c8:	4b4d      	ldr	r3, [pc, #308]	; (8001200 <HAL_GPIO_Init+0x2b8>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	4a4c      	ldr	r2, [pc, #304]	; (8001200 <HAL_GPIO_Init+0x2b8>)
 80010ce:	f043 0301 	orr.w	r3, r3, #1
 80010d2:	6193      	str	r3, [r2, #24]
 80010d4:	4b4a      	ldr	r3, [pc, #296]	; (8001200 <HAL_GPIO_Init+0x2b8>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	f003 0301 	and.w	r3, r3, #1
 80010dc:	60bb      	str	r3, [r7, #8]
 80010de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010e0:	4a48      	ldr	r2, [pc, #288]	; (8001204 <HAL_GPIO_Init+0x2bc>)
 80010e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e4:	089b      	lsrs	r3, r3, #2
 80010e6:	3302      	adds	r3, #2
 80010e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f0:	f003 0303 	and.w	r3, r3, #3
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	220f      	movs	r2, #15
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	4013      	ands	r3, r2
 8001102:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4a40      	ldr	r2, [pc, #256]	; (8001208 <HAL_GPIO_Init+0x2c0>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d013      	beq.n	8001134 <HAL_GPIO_Init+0x1ec>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4a3f      	ldr	r2, [pc, #252]	; (800120c <HAL_GPIO_Init+0x2c4>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d00d      	beq.n	8001130 <HAL_GPIO_Init+0x1e8>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4a3e      	ldr	r2, [pc, #248]	; (8001210 <HAL_GPIO_Init+0x2c8>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d007      	beq.n	800112c <HAL_GPIO_Init+0x1e4>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4a3d      	ldr	r2, [pc, #244]	; (8001214 <HAL_GPIO_Init+0x2cc>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d101      	bne.n	8001128 <HAL_GPIO_Init+0x1e0>
 8001124:	2303      	movs	r3, #3
 8001126:	e006      	b.n	8001136 <HAL_GPIO_Init+0x1ee>
 8001128:	2304      	movs	r3, #4
 800112a:	e004      	b.n	8001136 <HAL_GPIO_Init+0x1ee>
 800112c:	2302      	movs	r3, #2
 800112e:	e002      	b.n	8001136 <HAL_GPIO_Init+0x1ee>
 8001130:	2301      	movs	r3, #1
 8001132:	e000      	b.n	8001136 <HAL_GPIO_Init+0x1ee>
 8001134:	2300      	movs	r3, #0
 8001136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001138:	f002 0203 	and.w	r2, r2, #3
 800113c:	0092      	lsls	r2, r2, #2
 800113e:	4093      	lsls	r3, r2
 8001140:	68fa      	ldr	r2, [r7, #12]
 8001142:	4313      	orrs	r3, r2
 8001144:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001146:	492f      	ldr	r1, [pc, #188]	; (8001204 <HAL_GPIO_Init+0x2bc>)
 8001148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114a:	089b      	lsrs	r3, r3, #2
 800114c:	3302      	adds	r3, #2
 800114e:	68fa      	ldr	r2, [r7, #12]
 8001150:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d006      	beq.n	800116e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001160:	4b2d      	ldr	r3, [pc, #180]	; (8001218 <HAL_GPIO_Init+0x2d0>)
 8001162:	689a      	ldr	r2, [r3, #8]
 8001164:	492c      	ldr	r1, [pc, #176]	; (8001218 <HAL_GPIO_Init+0x2d0>)
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	4313      	orrs	r3, r2
 800116a:	608b      	str	r3, [r1, #8]
 800116c:	e006      	b.n	800117c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800116e:	4b2a      	ldr	r3, [pc, #168]	; (8001218 <HAL_GPIO_Init+0x2d0>)
 8001170:	689a      	ldr	r2, [r3, #8]
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	43db      	mvns	r3, r3
 8001176:	4928      	ldr	r1, [pc, #160]	; (8001218 <HAL_GPIO_Init+0x2d0>)
 8001178:	4013      	ands	r3, r2
 800117a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001184:	2b00      	cmp	r3, #0
 8001186:	d006      	beq.n	8001196 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001188:	4b23      	ldr	r3, [pc, #140]	; (8001218 <HAL_GPIO_Init+0x2d0>)
 800118a:	68da      	ldr	r2, [r3, #12]
 800118c:	4922      	ldr	r1, [pc, #136]	; (8001218 <HAL_GPIO_Init+0x2d0>)
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	4313      	orrs	r3, r2
 8001192:	60cb      	str	r3, [r1, #12]
 8001194:	e006      	b.n	80011a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001196:	4b20      	ldr	r3, [pc, #128]	; (8001218 <HAL_GPIO_Init+0x2d0>)
 8001198:	68da      	ldr	r2, [r3, #12]
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	43db      	mvns	r3, r3
 800119e:	491e      	ldr	r1, [pc, #120]	; (8001218 <HAL_GPIO_Init+0x2d0>)
 80011a0:	4013      	ands	r3, r2
 80011a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d006      	beq.n	80011be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011b0:	4b19      	ldr	r3, [pc, #100]	; (8001218 <HAL_GPIO_Init+0x2d0>)
 80011b2:	685a      	ldr	r2, [r3, #4]
 80011b4:	4918      	ldr	r1, [pc, #96]	; (8001218 <HAL_GPIO_Init+0x2d0>)
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	604b      	str	r3, [r1, #4]
 80011bc:	e006      	b.n	80011cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011be:	4b16      	ldr	r3, [pc, #88]	; (8001218 <HAL_GPIO_Init+0x2d0>)
 80011c0:	685a      	ldr	r2, [r3, #4]
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	43db      	mvns	r3, r3
 80011c6:	4914      	ldr	r1, [pc, #80]	; (8001218 <HAL_GPIO_Init+0x2d0>)
 80011c8:	4013      	ands	r3, r2
 80011ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d021      	beq.n	800121c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011d8:	4b0f      	ldr	r3, [pc, #60]	; (8001218 <HAL_GPIO_Init+0x2d0>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	490e      	ldr	r1, [pc, #56]	; (8001218 <HAL_GPIO_Init+0x2d0>)
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	600b      	str	r3, [r1, #0]
 80011e4:	e021      	b.n	800122a <HAL_GPIO_Init+0x2e2>
 80011e6:	bf00      	nop
 80011e8:	10320000 	.word	0x10320000
 80011ec:	10310000 	.word	0x10310000
 80011f0:	10220000 	.word	0x10220000
 80011f4:	10210000 	.word	0x10210000
 80011f8:	10120000 	.word	0x10120000
 80011fc:	10110000 	.word	0x10110000
 8001200:	40021000 	.word	0x40021000
 8001204:	40010000 	.word	0x40010000
 8001208:	40010800 	.word	0x40010800
 800120c:	40010c00 	.word	0x40010c00
 8001210:	40011000 	.word	0x40011000
 8001214:	40011400 	.word	0x40011400
 8001218:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800121c:	4b0b      	ldr	r3, [pc, #44]	; (800124c <HAL_GPIO_Init+0x304>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	43db      	mvns	r3, r3
 8001224:	4909      	ldr	r1, [pc, #36]	; (800124c <HAL_GPIO_Init+0x304>)
 8001226:	4013      	ands	r3, r2
 8001228:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800122a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122c:	3301      	adds	r3, #1
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001236:	fa22 f303 	lsr.w	r3, r2, r3
 800123a:	2b00      	cmp	r3, #0
 800123c:	f47f ae8e 	bne.w	8000f5c <HAL_GPIO_Init+0x14>
  }
}
 8001240:	bf00      	nop
 8001242:	bf00      	nop
 8001244:	372c      	adds	r7, #44	; 0x2c
 8001246:	46bd      	mov	sp, r7
 8001248:	bc80      	pop	{r7}
 800124a:	4770      	bx	lr
 800124c:	40010400 	.word	0x40010400

08001250 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	460b      	mov	r3, r1
 800125a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	689a      	ldr	r2, [r3, #8]
 8001260:	887b      	ldrh	r3, [r7, #2]
 8001262:	4013      	ands	r3, r2
 8001264:	2b00      	cmp	r3, #0
 8001266:	d002      	beq.n	800126e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001268:	2301      	movs	r3, #1
 800126a:	73fb      	strb	r3, [r7, #15]
 800126c:	e001      	b.n	8001272 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800126e:	2300      	movs	r3, #0
 8001270:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001272:	7bfb      	ldrb	r3, [r7, #15]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3714      	adds	r7, #20
 8001278:	46bd      	mov	sp, r7
 800127a:	bc80      	pop	{r7}
 800127c:	4770      	bx	lr

0800127e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800127e:	b480      	push	{r7}
 8001280:	b083      	sub	sp, #12
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
 8001286:	460b      	mov	r3, r1
 8001288:	807b      	strh	r3, [r7, #2]
 800128a:	4613      	mov	r3, r2
 800128c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800128e:	787b      	ldrb	r3, [r7, #1]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d003      	beq.n	800129c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001294:	887a      	ldrh	r2, [r7, #2]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800129a:	e003      	b.n	80012a4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800129c:	887b      	ldrh	r3, [r7, #2]
 800129e:	041a      	lsls	r2, r3, #16
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	611a      	str	r2, [r3, #16]
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bc80      	pop	{r7}
 80012ac:	4770      	bx	lr
	...

080012b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d101      	bne.n	80012c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e26c      	b.n	800179c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	f000 8087 	beq.w	80013de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012d0:	4b92      	ldr	r3, [pc, #584]	; (800151c <HAL_RCC_OscConfig+0x26c>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f003 030c 	and.w	r3, r3, #12
 80012d8:	2b04      	cmp	r3, #4
 80012da:	d00c      	beq.n	80012f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012dc:	4b8f      	ldr	r3, [pc, #572]	; (800151c <HAL_RCC_OscConfig+0x26c>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f003 030c 	and.w	r3, r3, #12
 80012e4:	2b08      	cmp	r3, #8
 80012e6:	d112      	bne.n	800130e <HAL_RCC_OscConfig+0x5e>
 80012e8:	4b8c      	ldr	r3, [pc, #560]	; (800151c <HAL_RCC_OscConfig+0x26c>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012f4:	d10b      	bne.n	800130e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f6:	4b89      	ldr	r3, [pc, #548]	; (800151c <HAL_RCC_OscConfig+0x26c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d06c      	beq.n	80013dc <HAL_RCC_OscConfig+0x12c>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d168      	bne.n	80013dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e246      	b.n	800179c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001316:	d106      	bne.n	8001326 <HAL_RCC_OscConfig+0x76>
 8001318:	4b80      	ldr	r3, [pc, #512]	; (800151c <HAL_RCC_OscConfig+0x26c>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a7f      	ldr	r2, [pc, #508]	; (800151c <HAL_RCC_OscConfig+0x26c>)
 800131e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001322:	6013      	str	r3, [r2, #0]
 8001324:	e02e      	b.n	8001384 <HAL_RCC_OscConfig+0xd4>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d10c      	bne.n	8001348 <HAL_RCC_OscConfig+0x98>
 800132e:	4b7b      	ldr	r3, [pc, #492]	; (800151c <HAL_RCC_OscConfig+0x26c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a7a      	ldr	r2, [pc, #488]	; (800151c <HAL_RCC_OscConfig+0x26c>)
 8001334:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001338:	6013      	str	r3, [r2, #0]
 800133a:	4b78      	ldr	r3, [pc, #480]	; (800151c <HAL_RCC_OscConfig+0x26c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a77      	ldr	r2, [pc, #476]	; (800151c <HAL_RCC_OscConfig+0x26c>)
 8001340:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001344:	6013      	str	r3, [r2, #0]
 8001346:	e01d      	b.n	8001384 <HAL_RCC_OscConfig+0xd4>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001350:	d10c      	bne.n	800136c <HAL_RCC_OscConfig+0xbc>
 8001352:	4b72      	ldr	r3, [pc, #456]	; (800151c <HAL_RCC_OscConfig+0x26c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a71      	ldr	r2, [pc, #452]	; (800151c <HAL_RCC_OscConfig+0x26c>)
 8001358:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800135c:	6013      	str	r3, [r2, #0]
 800135e:	4b6f      	ldr	r3, [pc, #444]	; (800151c <HAL_RCC_OscConfig+0x26c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a6e      	ldr	r2, [pc, #440]	; (800151c <HAL_RCC_OscConfig+0x26c>)
 8001364:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001368:	6013      	str	r3, [r2, #0]
 800136a:	e00b      	b.n	8001384 <HAL_RCC_OscConfig+0xd4>
 800136c:	4b6b      	ldr	r3, [pc, #428]	; (800151c <HAL_RCC_OscConfig+0x26c>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a6a      	ldr	r2, [pc, #424]	; (800151c <HAL_RCC_OscConfig+0x26c>)
 8001372:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001376:	6013      	str	r3, [r2, #0]
 8001378:	4b68      	ldr	r3, [pc, #416]	; (800151c <HAL_RCC_OscConfig+0x26c>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a67      	ldr	r2, [pc, #412]	; (800151c <HAL_RCC_OscConfig+0x26c>)
 800137e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001382:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d013      	beq.n	80013b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800138c:	f7ff fcc4 	bl	8000d18 <HAL_GetTick>
 8001390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001392:	e008      	b.n	80013a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001394:	f7ff fcc0 	bl	8000d18 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b64      	cmp	r3, #100	; 0x64
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e1fa      	b.n	800179c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013a6:	4b5d      	ldr	r3, [pc, #372]	; (800151c <HAL_RCC_OscConfig+0x26c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d0f0      	beq.n	8001394 <HAL_RCC_OscConfig+0xe4>
 80013b2:	e014      	b.n	80013de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b4:	f7ff fcb0 	bl	8000d18 <HAL_GetTick>
 80013b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ba:	e008      	b.n	80013ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013bc:	f7ff fcac 	bl	8000d18 <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2b64      	cmp	r3, #100	; 0x64
 80013c8:	d901      	bls.n	80013ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e1e6      	b.n	800179c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ce:	4b53      	ldr	r3, [pc, #332]	; (800151c <HAL_RCC_OscConfig+0x26c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d1f0      	bne.n	80013bc <HAL_RCC_OscConfig+0x10c>
 80013da:	e000      	b.n	80013de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d063      	beq.n	80014b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013ea:	4b4c      	ldr	r3, [pc, #304]	; (800151c <HAL_RCC_OscConfig+0x26c>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f003 030c 	and.w	r3, r3, #12
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d00b      	beq.n	800140e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80013f6:	4b49      	ldr	r3, [pc, #292]	; (800151c <HAL_RCC_OscConfig+0x26c>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f003 030c 	and.w	r3, r3, #12
 80013fe:	2b08      	cmp	r3, #8
 8001400:	d11c      	bne.n	800143c <HAL_RCC_OscConfig+0x18c>
 8001402:	4b46      	ldr	r3, [pc, #280]	; (800151c <HAL_RCC_OscConfig+0x26c>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d116      	bne.n	800143c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800140e:	4b43      	ldr	r3, [pc, #268]	; (800151c <HAL_RCC_OscConfig+0x26c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d005      	beq.n	8001426 <HAL_RCC_OscConfig+0x176>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	691b      	ldr	r3, [r3, #16]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d001      	beq.n	8001426 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e1ba      	b.n	800179c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001426:	4b3d      	ldr	r3, [pc, #244]	; (800151c <HAL_RCC_OscConfig+0x26c>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	4939      	ldr	r1, [pc, #228]	; (800151c <HAL_RCC_OscConfig+0x26c>)
 8001436:	4313      	orrs	r3, r2
 8001438:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800143a:	e03a      	b.n	80014b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	691b      	ldr	r3, [r3, #16]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d020      	beq.n	8001486 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001444:	4b36      	ldr	r3, [pc, #216]	; (8001520 <HAL_RCC_OscConfig+0x270>)
 8001446:	2201      	movs	r2, #1
 8001448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800144a:	f7ff fc65 	bl	8000d18 <HAL_GetTick>
 800144e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001450:	e008      	b.n	8001464 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001452:	f7ff fc61 	bl	8000d18 <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	2b02      	cmp	r3, #2
 800145e:	d901      	bls.n	8001464 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	e19b      	b.n	800179c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001464:	4b2d      	ldr	r3, [pc, #180]	; (800151c <HAL_RCC_OscConfig+0x26c>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	2b00      	cmp	r3, #0
 800146e:	d0f0      	beq.n	8001452 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001470:	4b2a      	ldr	r3, [pc, #168]	; (800151c <HAL_RCC_OscConfig+0x26c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	695b      	ldr	r3, [r3, #20]
 800147c:	00db      	lsls	r3, r3, #3
 800147e:	4927      	ldr	r1, [pc, #156]	; (800151c <HAL_RCC_OscConfig+0x26c>)
 8001480:	4313      	orrs	r3, r2
 8001482:	600b      	str	r3, [r1, #0]
 8001484:	e015      	b.n	80014b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001486:	4b26      	ldr	r3, [pc, #152]	; (8001520 <HAL_RCC_OscConfig+0x270>)
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800148c:	f7ff fc44 	bl	8000d18 <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001492:	e008      	b.n	80014a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001494:	f7ff fc40 	bl	8000d18 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e17a      	b.n	800179c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014a6:	4b1d      	ldr	r3, [pc, #116]	; (800151c <HAL_RCC_OscConfig+0x26c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d1f0      	bne.n	8001494 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0308 	and.w	r3, r3, #8
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d03a      	beq.n	8001534 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	699b      	ldr	r3, [r3, #24]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d019      	beq.n	80014fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014c6:	4b17      	ldr	r3, [pc, #92]	; (8001524 <HAL_RCC_OscConfig+0x274>)
 80014c8:	2201      	movs	r2, #1
 80014ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014cc:	f7ff fc24 	bl	8000d18 <HAL_GetTick>
 80014d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014d2:	e008      	b.n	80014e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014d4:	f7ff fc20 	bl	8000d18 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e15a      	b.n	800179c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014e6:	4b0d      	ldr	r3, [pc, #52]	; (800151c <HAL_RCC_OscConfig+0x26c>)
 80014e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d0f0      	beq.n	80014d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80014f2:	2001      	movs	r0, #1
 80014f4:	f000 fa9a 	bl	8001a2c <RCC_Delay>
 80014f8:	e01c      	b.n	8001534 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014fa:	4b0a      	ldr	r3, [pc, #40]	; (8001524 <HAL_RCC_OscConfig+0x274>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001500:	f7ff fc0a 	bl	8000d18 <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001506:	e00f      	b.n	8001528 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001508:	f7ff fc06 	bl	8000d18 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b02      	cmp	r3, #2
 8001514:	d908      	bls.n	8001528 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e140      	b.n	800179c <HAL_RCC_OscConfig+0x4ec>
 800151a:	bf00      	nop
 800151c:	40021000 	.word	0x40021000
 8001520:	42420000 	.word	0x42420000
 8001524:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001528:	4b9e      	ldr	r3, [pc, #632]	; (80017a4 <HAL_RCC_OscConfig+0x4f4>)
 800152a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152c:	f003 0302 	and.w	r3, r3, #2
 8001530:	2b00      	cmp	r3, #0
 8001532:	d1e9      	bne.n	8001508 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0304 	and.w	r3, r3, #4
 800153c:	2b00      	cmp	r3, #0
 800153e:	f000 80a6 	beq.w	800168e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001542:	2300      	movs	r3, #0
 8001544:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001546:	4b97      	ldr	r3, [pc, #604]	; (80017a4 <HAL_RCC_OscConfig+0x4f4>)
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d10d      	bne.n	800156e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001552:	4b94      	ldr	r3, [pc, #592]	; (80017a4 <HAL_RCC_OscConfig+0x4f4>)
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	4a93      	ldr	r2, [pc, #588]	; (80017a4 <HAL_RCC_OscConfig+0x4f4>)
 8001558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800155c:	61d3      	str	r3, [r2, #28]
 800155e:	4b91      	ldr	r3, [pc, #580]	; (80017a4 <HAL_RCC_OscConfig+0x4f4>)
 8001560:	69db      	ldr	r3, [r3, #28]
 8001562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001566:	60bb      	str	r3, [r7, #8]
 8001568:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800156a:	2301      	movs	r3, #1
 800156c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800156e:	4b8e      	ldr	r3, [pc, #568]	; (80017a8 <HAL_RCC_OscConfig+0x4f8>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001576:	2b00      	cmp	r3, #0
 8001578:	d118      	bne.n	80015ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800157a:	4b8b      	ldr	r3, [pc, #556]	; (80017a8 <HAL_RCC_OscConfig+0x4f8>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a8a      	ldr	r2, [pc, #552]	; (80017a8 <HAL_RCC_OscConfig+0x4f8>)
 8001580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001584:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001586:	f7ff fbc7 	bl	8000d18 <HAL_GetTick>
 800158a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800158c:	e008      	b.n	80015a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800158e:	f7ff fbc3 	bl	8000d18 <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	2b64      	cmp	r3, #100	; 0x64
 800159a:	d901      	bls.n	80015a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e0fd      	b.n	800179c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a0:	4b81      	ldr	r3, [pc, #516]	; (80017a8 <HAL_RCC_OscConfig+0x4f8>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d0f0      	beq.n	800158e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d106      	bne.n	80015c2 <HAL_RCC_OscConfig+0x312>
 80015b4:	4b7b      	ldr	r3, [pc, #492]	; (80017a4 <HAL_RCC_OscConfig+0x4f4>)
 80015b6:	6a1b      	ldr	r3, [r3, #32]
 80015b8:	4a7a      	ldr	r2, [pc, #488]	; (80017a4 <HAL_RCC_OscConfig+0x4f4>)
 80015ba:	f043 0301 	orr.w	r3, r3, #1
 80015be:	6213      	str	r3, [r2, #32]
 80015c0:	e02d      	b.n	800161e <HAL_RCC_OscConfig+0x36e>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d10c      	bne.n	80015e4 <HAL_RCC_OscConfig+0x334>
 80015ca:	4b76      	ldr	r3, [pc, #472]	; (80017a4 <HAL_RCC_OscConfig+0x4f4>)
 80015cc:	6a1b      	ldr	r3, [r3, #32]
 80015ce:	4a75      	ldr	r2, [pc, #468]	; (80017a4 <HAL_RCC_OscConfig+0x4f4>)
 80015d0:	f023 0301 	bic.w	r3, r3, #1
 80015d4:	6213      	str	r3, [r2, #32]
 80015d6:	4b73      	ldr	r3, [pc, #460]	; (80017a4 <HAL_RCC_OscConfig+0x4f4>)
 80015d8:	6a1b      	ldr	r3, [r3, #32]
 80015da:	4a72      	ldr	r2, [pc, #456]	; (80017a4 <HAL_RCC_OscConfig+0x4f4>)
 80015dc:	f023 0304 	bic.w	r3, r3, #4
 80015e0:	6213      	str	r3, [r2, #32]
 80015e2:	e01c      	b.n	800161e <HAL_RCC_OscConfig+0x36e>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	2b05      	cmp	r3, #5
 80015ea:	d10c      	bne.n	8001606 <HAL_RCC_OscConfig+0x356>
 80015ec:	4b6d      	ldr	r3, [pc, #436]	; (80017a4 <HAL_RCC_OscConfig+0x4f4>)
 80015ee:	6a1b      	ldr	r3, [r3, #32]
 80015f0:	4a6c      	ldr	r2, [pc, #432]	; (80017a4 <HAL_RCC_OscConfig+0x4f4>)
 80015f2:	f043 0304 	orr.w	r3, r3, #4
 80015f6:	6213      	str	r3, [r2, #32]
 80015f8:	4b6a      	ldr	r3, [pc, #424]	; (80017a4 <HAL_RCC_OscConfig+0x4f4>)
 80015fa:	6a1b      	ldr	r3, [r3, #32]
 80015fc:	4a69      	ldr	r2, [pc, #420]	; (80017a4 <HAL_RCC_OscConfig+0x4f4>)
 80015fe:	f043 0301 	orr.w	r3, r3, #1
 8001602:	6213      	str	r3, [r2, #32]
 8001604:	e00b      	b.n	800161e <HAL_RCC_OscConfig+0x36e>
 8001606:	4b67      	ldr	r3, [pc, #412]	; (80017a4 <HAL_RCC_OscConfig+0x4f4>)
 8001608:	6a1b      	ldr	r3, [r3, #32]
 800160a:	4a66      	ldr	r2, [pc, #408]	; (80017a4 <HAL_RCC_OscConfig+0x4f4>)
 800160c:	f023 0301 	bic.w	r3, r3, #1
 8001610:	6213      	str	r3, [r2, #32]
 8001612:	4b64      	ldr	r3, [pc, #400]	; (80017a4 <HAL_RCC_OscConfig+0x4f4>)
 8001614:	6a1b      	ldr	r3, [r3, #32]
 8001616:	4a63      	ldr	r2, [pc, #396]	; (80017a4 <HAL_RCC_OscConfig+0x4f4>)
 8001618:	f023 0304 	bic.w	r3, r3, #4
 800161c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	68db      	ldr	r3, [r3, #12]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d015      	beq.n	8001652 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001626:	f7ff fb77 	bl	8000d18 <HAL_GetTick>
 800162a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800162c:	e00a      	b.n	8001644 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800162e:	f7ff fb73 	bl	8000d18 <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	f241 3288 	movw	r2, #5000	; 0x1388
 800163c:	4293      	cmp	r3, r2
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e0ab      	b.n	800179c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001644:	4b57      	ldr	r3, [pc, #348]	; (80017a4 <HAL_RCC_OscConfig+0x4f4>)
 8001646:	6a1b      	ldr	r3, [r3, #32]
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d0ee      	beq.n	800162e <HAL_RCC_OscConfig+0x37e>
 8001650:	e014      	b.n	800167c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001652:	f7ff fb61 	bl	8000d18 <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001658:	e00a      	b.n	8001670 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800165a:	f7ff fb5d 	bl	8000d18 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	f241 3288 	movw	r2, #5000	; 0x1388
 8001668:	4293      	cmp	r3, r2
 800166a:	d901      	bls.n	8001670 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e095      	b.n	800179c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001670:	4b4c      	ldr	r3, [pc, #304]	; (80017a4 <HAL_RCC_OscConfig+0x4f4>)
 8001672:	6a1b      	ldr	r3, [r3, #32]
 8001674:	f003 0302 	and.w	r3, r3, #2
 8001678:	2b00      	cmp	r3, #0
 800167a:	d1ee      	bne.n	800165a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800167c:	7dfb      	ldrb	r3, [r7, #23]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d105      	bne.n	800168e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001682:	4b48      	ldr	r3, [pc, #288]	; (80017a4 <HAL_RCC_OscConfig+0x4f4>)
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	4a47      	ldr	r2, [pc, #284]	; (80017a4 <HAL_RCC_OscConfig+0x4f4>)
 8001688:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800168c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	69db      	ldr	r3, [r3, #28]
 8001692:	2b00      	cmp	r3, #0
 8001694:	f000 8081 	beq.w	800179a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001698:	4b42      	ldr	r3, [pc, #264]	; (80017a4 <HAL_RCC_OscConfig+0x4f4>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f003 030c 	and.w	r3, r3, #12
 80016a0:	2b08      	cmp	r3, #8
 80016a2:	d061      	beq.n	8001768 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	69db      	ldr	r3, [r3, #28]
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d146      	bne.n	800173a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ac:	4b3f      	ldr	r3, [pc, #252]	; (80017ac <HAL_RCC_OscConfig+0x4fc>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b2:	f7ff fb31 	bl	8000d18 <HAL_GetTick>
 80016b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016b8:	e008      	b.n	80016cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ba:	f7ff fb2d 	bl	8000d18 <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e067      	b.n	800179c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016cc:	4b35      	ldr	r3, [pc, #212]	; (80017a4 <HAL_RCC_OscConfig+0x4f4>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d1f0      	bne.n	80016ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a1b      	ldr	r3, [r3, #32]
 80016dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016e0:	d108      	bne.n	80016f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016e2:	4b30      	ldr	r3, [pc, #192]	; (80017a4 <HAL_RCC_OscConfig+0x4f4>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	492d      	ldr	r1, [pc, #180]	; (80017a4 <HAL_RCC_OscConfig+0x4f4>)
 80016f0:	4313      	orrs	r3, r2
 80016f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016f4:	4b2b      	ldr	r3, [pc, #172]	; (80017a4 <HAL_RCC_OscConfig+0x4f4>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a19      	ldr	r1, [r3, #32]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001704:	430b      	orrs	r3, r1
 8001706:	4927      	ldr	r1, [pc, #156]	; (80017a4 <HAL_RCC_OscConfig+0x4f4>)
 8001708:	4313      	orrs	r3, r2
 800170a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800170c:	4b27      	ldr	r3, [pc, #156]	; (80017ac <HAL_RCC_OscConfig+0x4fc>)
 800170e:	2201      	movs	r2, #1
 8001710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001712:	f7ff fb01 	bl	8000d18 <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001718:	e008      	b.n	800172c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800171a:	f7ff fafd 	bl	8000d18 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e037      	b.n	800179c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800172c:	4b1d      	ldr	r3, [pc, #116]	; (80017a4 <HAL_RCC_OscConfig+0x4f4>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d0f0      	beq.n	800171a <HAL_RCC_OscConfig+0x46a>
 8001738:	e02f      	b.n	800179a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800173a:	4b1c      	ldr	r3, [pc, #112]	; (80017ac <HAL_RCC_OscConfig+0x4fc>)
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001740:	f7ff faea 	bl	8000d18 <HAL_GetTick>
 8001744:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001746:	e008      	b.n	800175a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001748:	f7ff fae6 	bl	8000d18 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b02      	cmp	r3, #2
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e020      	b.n	800179c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800175a:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <HAL_RCC_OscConfig+0x4f4>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d1f0      	bne.n	8001748 <HAL_RCC_OscConfig+0x498>
 8001766:	e018      	b.n	800179a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	69db      	ldr	r3, [r3, #28]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d101      	bne.n	8001774 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e013      	b.n	800179c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001774:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <HAL_RCC_OscConfig+0x4f4>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a1b      	ldr	r3, [r3, #32]
 8001784:	429a      	cmp	r2, r3
 8001786:	d106      	bne.n	8001796 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001792:	429a      	cmp	r2, r3
 8001794:	d001      	beq.n	800179a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e000      	b.n	800179c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	3718      	adds	r7, #24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40021000 	.word	0x40021000
 80017a8:	40007000 	.word	0x40007000
 80017ac:	42420060 	.word	0x42420060

080017b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d101      	bne.n	80017c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e0d0      	b.n	8001966 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017c4:	4b6a      	ldr	r3, [pc, #424]	; (8001970 <HAL_RCC_ClockConfig+0x1c0>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0307 	and.w	r3, r3, #7
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d910      	bls.n	80017f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d2:	4b67      	ldr	r3, [pc, #412]	; (8001970 <HAL_RCC_ClockConfig+0x1c0>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f023 0207 	bic.w	r2, r3, #7
 80017da:	4965      	ldr	r1, [pc, #404]	; (8001970 <HAL_RCC_ClockConfig+0x1c0>)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	4313      	orrs	r3, r2
 80017e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017e2:	4b63      	ldr	r3, [pc, #396]	; (8001970 <HAL_RCC_ClockConfig+0x1c0>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	683a      	ldr	r2, [r7, #0]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d001      	beq.n	80017f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e0b8      	b.n	8001966 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d020      	beq.n	8001842 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0304 	and.w	r3, r3, #4
 8001808:	2b00      	cmp	r3, #0
 800180a:	d005      	beq.n	8001818 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800180c:	4b59      	ldr	r3, [pc, #356]	; (8001974 <HAL_RCC_ClockConfig+0x1c4>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	4a58      	ldr	r2, [pc, #352]	; (8001974 <HAL_RCC_ClockConfig+0x1c4>)
 8001812:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001816:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0308 	and.w	r3, r3, #8
 8001820:	2b00      	cmp	r3, #0
 8001822:	d005      	beq.n	8001830 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001824:	4b53      	ldr	r3, [pc, #332]	; (8001974 <HAL_RCC_ClockConfig+0x1c4>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	4a52      	ldr	r2, [pc, #328]	; (8001974 <HAL_RCC_ClockConfig+0x1c4>)
 800182a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800182e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001830:	4b50      	ldr	r3, [pc, #320]	; (8001974 <HAL_RCC_ClockConfig+0x1c4>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	494d      	ldr	r1, [pc, #308]	; (8001974 <HAL_RCC_ClockConfig+0x1c4>)
 800183e:	4313      	orrs	r3, r2
 8001840:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	2b00      	cmp	r3, #0
 800184c:	d040      	beq.n	80018d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d107      	bne.n	8001866 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001856:	4b47      	ldr	r3, [pc, #284]	; (8001974 <HAL_RCC_ClockConfig+0x1c4>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d115      	bne.n	800188e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e07f      	b.n	8001966 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	2b02      	cmp	r3, #2
 800186c:	d107      	bne.n	800187e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800186e:	4b41      	ldr	r3, [pc, #260]	; (8001974 <HAL_RCC_ClockConfig+0x1c4>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d109      	bne.n	800188e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e073      	b.n	8001966 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800187e:	4b3d      	ldr	r3, [pc, #244]	; (8001974 <HAL_RCC_ClockConfig+0x1c4>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d101      	bne.n	800188e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e06b      	b.n	8001966 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800188e:	4b39      	ldr	r3, [pc, #228]	; (8001974 <HAL_RCC_ClockConfig+0x1c4>)
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f023 0203 	bic.w	r2, r3, #3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	4936      	ldr	r1, [pc, #216]	; (8001974 <HAL_RCC_ClockConfig+0x1c4>)
 800189c:	4313      	orrs	r3, r2
 800189e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018a0:	f7ff fa3a 	bl	8000d18 <HAL_GetTick>
 80018a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018a6:	e00a      	b.n	80018be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018a8:	f7ff fa36 	bl	8000d18 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e053      	b.n	8001966 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018be:	4b2d      	ldr	r3, [pc, #180]	; (8001974 <HAL_RCC_ClockConfig+0x1c4>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f003 020c 	and.w	r2, r3, #12
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d1eb      	bne.n	80018a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018d0:	4b27      	ldr	r3, [pc, #156]	; (8001970 <HAL_RCC_ClockConfig+0x1c0>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0307 	and.w	r3, r3, #7
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d210      	bcs.n	8001900 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018de:	4b24      	ldr	r3, [pc, #144]	; (8001970 <HAL_RCC_ClockConfig+0x1c0>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f023 0207 	bic.w	r2, r3, #7
 80018e6:	4922      	ldr	r1, [pc, #136]	; (8001970 <HAL_RCC_ClockConfig+0x1c0>)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ee:	4b20      	ldr	r3, [pc, #128]	; (8001970 <HAL_RCC_ClockConfig+0x1c0>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	683a      	ldr	r2, [r7, #0]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d001      	beq.n	8001900 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e032      	b.n	8001966 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0304 	and.w	r3, r3, #4
 8001908:	2b00      	cmp	r3, #0
 800190a:	d008      	beq.n	800191e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800190c:	4b19      	ldr	r3, [pc, #100]	; (8001974 <HAL_RCC_ClockConfig+0x1c4>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	4916      	ldr	r1, [pc, #88]	; (8001974 <HAL_RCC_ClockConfig+0x1c4>)
 800191a:	4313      	orrs	r3, r2
 800191c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0308 	and.w	r3, r3, #8
 8001926:	2b00      	cmp	r3, #0
 8001928:	d009      	beq.n	800193e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800192a:	4b12      	ldr	r3, [pc, #72]	; (8001974 <HAL_RCC_ClockConfig+0x1c4>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	691b      	ldr	r3, [r3, #16]
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	490e      	ldr	r1, [pc, #56]	; (8001974 <HAL_RCC_ClockConfig+0x1c4>)
 800193a:	4313      	orrs	r3, r2
 800193c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800193e:	f000 f821 	bl	8001984 <HAL_RCC_GetSysClockFreq>
 8001942:	4602      	mov	r2, r0
 8001944:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <HAL_RCC_ClockConfig+0x1c4>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	091b      	lsrs	r3, r3, #4
 800194a:	f003 030f 	and.w	r3, r3, #15
 800194e:	490a      	ldr	r1, [pc, #40]	; (8001978 <HAL_RCC_ClockConfig+0x1c8>)
 8001950:	5ccb      	ldrb	r3, [r1, r3]
 8001952:	fa22 f303 	lsr.w	r3, r2, r3
 8001956:	4a09      	ldr	r2, [pc, #36]	; (800197c <HAL_RCC_ClockConfig+0x1cc>)
 8001958:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800195a:	4b09      	ldr	r3, [pc, #36]	; (8001980 <HAL_RCC_ClockConfig+0x1d0>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff f998 	bl	8000c94 <HAL_InitTick>

  return HAL_OK;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40022000 	.word	0x40022000
 8001974:	40021000 	.word	0x40021000
 8001978:	080022d4 	.word	0x080022d4
 800197c:	2000003c 	.word	0x2000003c
 8001980:	20000040 	.word	0x20000040

08001984 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001984:	b480      	push	{r7}
 8001986:	b087      	sub	sp, #28
 8001988:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	2300      	movs	r3, #0
 8001990:	60bb      	str	r3, [r7, #8]
 8001992:	2300      	movs	r3, #0
 8001994:	617b      	str	r3, [r7, #20]
 8001996:	2300      	movs	r3, #0
 8001998:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800199a:	2300      	movs	r3, #0
 800199c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800199e:	4b1e      	ldr	r3, [pc, #120]	; (8001a18 <HAL_RCC_GetSysClockFreq+0x94>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f003 030c 	and.w	r3, r3, #12
 80019aa:	2b04      	cmp	r3, #4
 80019ac:	d002      	beq.n	80019b4 <HAL_RCC_GetSysClockFreq+0x30>
 80019ae:	2b08      	cmp	r3, #8
 80019b0:	d003      	beq.n	80019ba <HAL_RCC_GetSysClockFreq+0x36>
 80019b2:	e027      	b.n	8001a04 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019b4:	4b19      	ldr	r3, [pc, #100]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x98>)
 80019b6:	613b      	str	r3, [r7, #16]
      break;
 80019b8:	e027      	b.n	8001a0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	0c9b      	lsrs	r3, r3, #18
 80019be:	f003 030f 	and.w	r3, r3, #15
 80019c2:	4a17      	ldr	r2, [pc, #92]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x9c>)
 80019c4:	5cd3      	ldrb	r3, [r2, r3]
 80019c6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d010      	beq.n	80019f4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019d2:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <HAL_RCC_GetSysClockFreq+0x94>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	0c5b      	lsrs	r3, r3, #17
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	4a11      	ldr	r2, [pc, #68]	; (8001a24 <HAL_RCC_GetSysClockFreq+0xa0>)
 80019de:	5cd3      	ldrb	r3, [r2, r3]
 80019e0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a0d      	ldr	r2, [pc, #52]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x98>)
 80019e6:	fb02 f203 	mul.w	r2, r2, r3
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f0:	617b      	str	r3, [r7, #20]
 80019f2:	e004      	b.n	80019fe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4a0c      	ldr	r2, [pc, #48]	; (8001a28 <HAL_RCC_GetSysClockFreq+0xa4>)
 80019f8:	fb02 f303 	mul.w	r3, r2, r3
 80019fc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	613b      	str	r3, [r7, #16]
      break;
 8001a02:	e002      	b.n	8001a0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a04:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x98>)
 8001a06:	613b      	str	r3, [r7, #16]
      break;
 8001a08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a0a:	693b      	ldr	r3, [r7, #16]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	371c      	adds	r7, #28
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bc80      	pop	{r7}
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	007a1200 	.word	0x007a1200
 8001a20:	080022e4 	.word	0x080022e4
 8001a24:	080022f4 	.word	0x080022f4
 8001a28:	003d0900 	.word	0x003d0900

08001a2c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a34:	4b0a      	ldr	r3, [pc, #40]	; (8001a60 <RCC_Delay+0x34>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a0a      	ldr	r2, [pc, #40]	; (8001a64 <RCC_Delay+0x38>)
 8001a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a3e:	0a5b      	lsrs	r3, r3, #9
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	fb02 f303 	mul.w	r3, r2, r3
 8001a46:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a48:	bf00      	nop
  }
  while (Delay --);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	1e5a      	subs	r2, r3, #1
 8001a4e:	60fa      	str	r2, [r7, #12]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d1f9      	bne.n	8001a48 <RCC_Delay+0x1c>
}
 8001a54:	bf00      	nop
 8001a56:	bf00      	nop
 8001a58:	3714      	adds	r7, #20
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bc80      	pop	{r7}
 8001a5e:	4770      	bx	lr
 8001a60:	2000003c 	.word	0x2000003c
 8001a64:	10624dd3 	.word	0x10624dd3

08001a68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e041      	b.n	8001afe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d106      	bne.n	8001a94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7ff f868 	bl	8000b64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2202      	movs	r2, #2
 8001a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3304      	adds	r3, #4
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4610      	mov	r0, r2
 8001aa8:	f000 fa74 	bl	8001f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
	...

08001b08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d001      	beq.n	8001b20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e03a      	b.n	8001b96 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2202      	movs	r2, #2
 8001b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	68da      	ldr	r2, [r3, #12]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f042 0201 	orr.w	r2, r2, #1
 8001b36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a18      	ldr	r2, [pc, #96]	; (8001ba0 <HAL_TIM_Base_Start_IT+0x98>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d00e      	beq.n	8001b60 <HAL_TIM_Base_Start_IT+0x58>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b4a:	d009      	beq.n	8001b60 <HAL_TIM_Base_Start_IT+0x58>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a14      	ldr	r2, [pc, #80]	; (8001ba4 <HAL_TIM_Base_Start_IT+0x9c>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d004      	beq.n	8001b60 <HAL_TIM_Base_Start_IT+0x58>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a13      	ldr	r2, [pc, #76]	; (8001ba8 <HAL_TIM_Base_Start_IT+0xa0>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d111      	bne.n	8001b84 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2b06      	cmp	r3, #6
 8001b70:	d010      	beq.n	8001b94 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f042 0201 	orr.w	r2, r2, #1
 8001b80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b82:	e007      	b.n	8001b94 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f042 0201 	orr.w	r2, r2, #1
 8001b92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3714      	adds	r7, #20
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr
 8001ba0:	40012c00 	.word	0x40012c00
 8001ba4:	40000400 	.word	0x40000400
 8001ba8:	40000800 	.word	0x40000800

08001bac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d122      	bne.n	8001c08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d11b      	bne.n	8001c08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f06f 0202 	mvn.w	r2, #2
 8001bd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	f003 0303 	and.w	r3, r3, #3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 f9b4 	bl	8001f5c <HAL_TIM_IC_CaptureCallback>
 8001bf4:	e005      	b.n	8001c02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 f9a7 	bl	8001f4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f000 f9b6 	bl	8001f6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	f003 0304 	and.w	r3, r3, #4
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	d122      	bne.n	8001c5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	f003 0304 	and.w	r3, r3, #4
 8001c20:	2b04      	cmp	r3, #4
 8001c22:	d11b      	bne.n	8001c5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f06f 0204 	mvn.w	r2, #4
 8001c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2202      	movs	r2, #2
 8001c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d003      	beq.n	8001c4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 f98a 	bl	8001f5c <HAL_TIM_IC_CaptureCallback>
 8001c48:	e005      	b.n	8001c56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f97d 	bl	8001f4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 f98c 	bl	8001f6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	f003 0308 	and.w	r3, r3, #8
 8001c66:	2b08      	cmp	r3, #8
 8001c68:	d122      	bne.n	8001cb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	f003 0308 	and.w	r3, r3, #8
 8001c74:	2b08      	cmp	r3, #8
 8001c76:	d11b      	bne.n	8001cb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f06f 0208 	mvn.w	r2, #8
 8001c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2204      	movs	r2, #4
 8001c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	f003 0303 	and.w	r3, r3, #3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 f960 	bl	8001f5c <HAL_TIM_IC_CaptureCallback>
 8001c9c:	e005      	b.n	8001caa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 f953 	bl	8001f4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 f962 	bl	8001f6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	f003 0310 	and.w	r3, r3, #16
 8001cba:	2b10      	cmp	r3, #16
 8001cbc:	d122      	bne.n	8001d04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	f003 0310 	and.w	r3, r3, #16
 8001cc8:	2b10      	cmp	r3, #16
 8001cca:	d11b      	bne.n	8001d04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f06f 0210 	mvn.w	r2, #16
 8001cd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2208      	movs	r2, #8
 8001cda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 f936 	bl	8001f5c <HAL_TIM_IC_CaptureCallback>
 8001cf0:	e005      	b.n	8001cfe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f929 	bl	8001f4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 f938 	bl	8001f6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d10e      	bne.n	8001d30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d107      	bne.n	8001d30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f06f 0201 	mvn.w	r2, #1
 8001d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f7fe fe8e 	bl	8000a4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d3a:	2b80      	cmp	r3, #128	; 0x80
 8001d3c:	d10e      	bne.n	8001d5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d48:	2b80      	cmp	r3, #128	; 0x80
 8001d4a:	d107      	bne.n	8001d5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 fa7b 	bl	8002252 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d66:	2b40      	cmp	r3, #64	; 0x40
 8001d68:	d10e      	bne.n	8001d88 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d74:	2b40      	cmp	r3, #64	; 0x40
 8001d76:	d107      	bne.n	8001d88 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 f8fc 	bl	8001f80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	f003 0320 	and.w	r3, r3, #32
 8001d92:	2b20      	cmp	r3, #32
 8001d94:	d10e      	bne.n	8001db4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	f003 0320 	and.w	r3, r3, #32
 8001da0:	2b20      	cmp	r3, #32
 8001da2:	d107      	bne.n	8001db4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f06f 0220 	mvn.w	r2, #32
 8001dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 fa46 	bl	8002240 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001db4:	bf00      	nop
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d101      	bne.n	8001dd8 <HAL_TIM_ConfigClockSource+0x1c>
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	e0b4      	b.n	8001f42 <HAL_TIM_ConfigClockSource+0x186>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2202      	movs	r2, #2
 8001de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001df6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001dfe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	68ba      	ldr	r2, [r7, #8]
 8001e06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e10:	d03e      	beq.n	8001e90 <HAL_TIM_ConfigClockSource+0xd4>
 8001e12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e16:	f200 8087 	bhi.w	8001f28 <HAL_TIM_ConfigClockSource+0x16c>
 8001e1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e1e:	f000 8086 	beq.w	8001f2e <HAL_TIM_ConfigClockSource+0x172>
 8001e22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e26:	d87f      	bhi.n	8001f28 <HAL_TIM_ConfigClockSource+0x16c>
 8001e28:	2b70      	cmp	r3, #112	; 0x70
 8001e2a:	d01a      	beq.n	8001e62 <HAL_TIM_ConfigClockSource+0xa6>
 8001e2c:	2b70      	cmp	r3, #112	; 0x70
 8001e2e:	d87b      	bhi.n	8001f28 <HAL_TIM_ConfigClockSource+0x16c>
 8001e30:	2b60      	cmp	r3, #96	; 0x60
 8001e32:	d050      	beq.n	8001ed6 <HAL_TIM_ConfigClockSource+0x11a>
 8001e34:	2b60      	cmp	r3, #96	; 0x60
 8001e36:	d877      	bhi.n	8001f28 <HAL_TIM_ConfigClockSource+0x16c>
 8001e38:	2b50      	cmp	r3, #80	; 0x50
 8001e3a:	d03c      	beq.n	8001eb6 <HAL_TIM_ConfigClockSource+0xfa>
 8001e3c:	2b50      	cmp	r3, #80	; 0x50
 8001e3e:	d873      	bhi.n	8001f28 <HAL_TIM_ConfigClockSource+0x16c>
 8001e40:	2b40      	cmp	r3, #64	; 0x40
 8001e42:	d058      	beq.n	8001ef6 <HAL_TIM_ConfigClockSource+0x13a>
 8001e44:	2b40      	cmp	r3, #64	; 0x40
 8001e46:	d86f      	bhi.n	8001f28 <HAL_TIM_ConfigClockSource+0x16c>
 8001e48:	2b30      	cmp	r3, #48	; 0x30
 8001e4a:	d064      	beq.n	8001f16 <HAL_TIM_ConfigClockSource+0x15a>
 8001e4c:	2b30      	cmp	r3, #48	; 0x30
 8001e4e:	d86b      	bhi.n	8001f28 <HAL_TIM_ConfigClockSource+0x16c>
 8001e50:	2b20      	cmp	r3, #32
 8001e52:	d060      	beq.n	8001f16 <HAL_TIM_ConfigClockSource+0x15a>
 8001e54:	2b20      	cmp	r3, #32
 8001e56:	d867      	bhi.n	8001f28 <HAL_TIM_ConfigClockSource+0x16c>
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d05c      	beq.n	8001f16 <HAL_TIM_ConfigClockSource+0x15a>
 8001e5c:	2b10      	cmp	r3, #16
 8001e5e:	d05a      	beq.n	8001f16 <HAL_TIM_ConfigClockSource+0x15a>
 8001e60:	e062      	b.n	8001f28 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6818      	ldr	r0, [r3, #0]
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	6899      	ldr	r1, [r3, #8]
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685a      	ldr	r2, [r3, #4]
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	f000 f968 	bl	8002146 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001e84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68ba      	ldr	r2, [r7, #8]
 8001e8c:	609a      	str	r2, [r3, #8]
      break;
 8001e8e:	e04f      	b.n	8001f30 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6818      	ldr	r0, [r3, #0]
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	6899      	ldr	r1, [r3, #8]
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685a      	ldr	r2, [r3, #4]
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	f000 f951 	bl	8002146 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	689a      	ldr	r2, [r3, #8]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001eb2:	609a      	str	r2, [r3, #8]
      break;
 8001eb4:	e03c      	b.n	8001f30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6818      	ldr	r0, [r3, #0]
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	6859      	ldr	r1, [r3, #4]
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	f000 f8c8 	bl	8002058 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2150      	movs	r1, #80	; 0x50
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f000 f91f 	bl	8002112 <TIM_ITRx_SetConfig>
      break;
 8001ed4:	e02c      	b.n	8001f30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6818      	ldr	r0, [r3, #0]
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	6859      	ldr	r1, [r3, #4]
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	f000 f8e6 	bl	80020b4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2160      	movs	r1, #96	; 0x60
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f000 f90f 	bl	8002112 <TIM_ITRx_SetConfig>
      break;
 8001ef4:	e01c      	b.n	8001f30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6818      	ldr	r0, [r3, #0]
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	6859      	ldr	r1, [r3, #4]
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	461a      	mov	r2, r3
 8001f04:	f000 f8a8 	bl	8002058 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2140      	movs	r1, #64	; 0x40
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f000 f8ff 	bl	8002112 <TIM_ITRx_SetConfig>
      break;
 8001f14:	e00c      	b.n	8001f30 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4610      	mov	r0, r2
 8001f22:	f000 f8f6 	bl	8002112 <TIM_ITRx_SetConfig>
      break;
 8001f26:	e003      	b.n	8001f30 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	73fb      	strb	r3, [r7, #15]
      break;
 8001f2c:	e000      	b.n	8001f30 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001f2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	b083      	sub	sp, #12
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bc80      	pop	{r7}
 8001f5a:	4770      	bx	lr

08001f5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr

08001f6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr

08001f80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bc80      	pop	{r7}
 8001f90:	4770      	bx	lr
	...

08001f94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a29      	ldr	r2, [pc, #164]	; (800204c <TIM_Base_SetConfig+0xb8>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d00b      	beq.n	8001fc4 <TIM_Base_SetConfig+0x30>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fb2:	d007      	beq.n	8001fc4 <TIM_Base_SetConfig+0x30>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a26      	ldr	r2, [pc, #152]	; (8002050 <TIM_Base_SetConfig+0xbc>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d003      	beq.n	8001fc4 <TIM_Base_SetConfig+0x30>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a25      	ldr	r2, [pc, #148]	; (8002054 <TIM_Base_SetConfig+0xc0>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d108      	bne.n	8001fd6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a1c      	ldr	r2, [pc, #112]	; (800204c <TIM_Base_SetConfig+0xb8>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d00b      	beq.n	8001ff6 <TIM_Base_SetConfig+0x62>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fe4:	d007      	beq.n	8001ff6 <TIM_Base_SetConfig+0x62>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a19      	ldr	r2, [pc, #100]	; (8002050 <TIM_Base_SetConfig+0xbc>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d003      	beq.n	8001ff6 <TIM_Base_SetConfig+0x62>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a18      	ldr	r2, [pc, #96]	; (8002054 <TIM_Base_SetConfig+0xc0>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d108      	bne.n	8002008 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ffc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	4313      	orrs	r3, r2
 8002006:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	4313      	orrs	r3, r2
 8002014:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	68fa      	ldr	r2, [r7, #12]
 800201a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a07      	ldr	r2, [pc, #28]	; (800204c <TIM_Base_SetConfig+0xb8>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d103      	bne.n	800203c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	691a      	ldr	r2, [r3, #16]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	615a      	str	r2, [r3, #20]
}
 8002042:	bf00      	nop
 8002044:	3714      	adds	r7, #20
 8002046:	46bd      	mov	sp, r7
 8002048:	bc80      	pop	{r7}
 800204a:	4770      	bx	lr
 800204c:	40012c00 	.word	0x40012c00
 8002050:	40000400 	.word	0x40000400
 8002054:	40000800 	.word	0x40000800

08002058 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002058:	b480      	push	{r7}
 800205a:	b087      	sub	sp, #28
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6a1b      	ldr	r3, [r3, #32]
 8002068:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6a1b      	ldr	r3, [r3, #32]
 800206e:	f023 0201 	bic.w	r2, r3, #1
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002082:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	011b      	lsls	r3, r3, #4
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	4313      	orrs	r3, r2
 800208c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	f023 030a 	bic.w	r3, r3, #10
 8002094:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002096:	697a      	ldr	r2, [r7, #20]
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	4313      	orrs	r3, r2
 800209c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	697a      	ldr	r2, [r7, #20]
 80020a8:	621a      	str	r2, [r3, #32]
}
 80020aa:	bf00      	nop
 80020ac:	371c      	adds	r7, #28
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bc80      	pop	{r7}
 80020b2:	4770      	bx	lr

080020b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b087      	sub	sp, #28
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6a1b      	ldr	r3, [r3, #32]
 80020ca:	f023 0210 	bic.w	r2, r3, #16
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80020de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	031b      	lsls	r3, r3, #12
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80020f0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	011b      	lsls	r3, r3, #4
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	697a      	ldr	r2, [r7, #20]
 8002106:	621a      	str	r2, [r3, #32]
}
 8002108:	bf00      	nop
 800210a:	371c      	adds	r7, #28
 800210c:	46bd      	mov	sp, r7
 800210e:	bc80      	pop	{r7}
 8002110:	4770      	bx	lr

08002112 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002112:	b480      	push	{r7}
 8002114:	b085      	sub	sp, #20
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
 800211a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002128:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4313      	orrs	r3, r2
 8002130:	f043 0307 	orr.w	r3, r3, #7
 8002134:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	609a      	str	r2, [r3, #8]
}
 800213c:	bf00      	nop
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	bc80      	pop	{r7}
 8002144:	4770      	bx	lr

08002146 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002146:	b480      	push	{r7}
 8002148:	b087      	sub	sp, #28
 800214a:	af00      	add	r7, sp, #0
 800214c:	60f8      	str	r0, [r7, #12]
 800214e:	60b9      	str	r1, [r7, #8]
 8002150:	607a      	str	r2, [r7, #4]
 8002152:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002160:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	021a      	lsls	r2, r3, #8
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	431a      	orrs	r2, r3
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	4313      	orrs	r3, r2
 800216e:	697a      	ldr	r2, [r7, #20]
 8002170:	4313      	orrs	r3, r2
 8002172:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	697a      	ldr	r2, [r7, #20]
 8002178:	609a      	str	r2, [r3, #8]
}
 800217a:	bf00      	nop
 800217c:	371c      	adds	r7, #28
 800217e:	46bd      	mov	sp, r7
 8002180:	bc80      	pop	{r7}
 8002182:	4770      	bx	lr

08002184 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002194:	2b01      	cmp	r3, #1
 8002196:	d101      	bne.n	800219c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002198:	2302      	movs	r3, #2
 800219a:	e046      	b.n	800222a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2202      	movs	r2, #2
 80021a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a16      	ldr	r2, [pc, #88]	; (8002234 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d00e      	beq.n	80021fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021e8:	d009      	beq.n	80021fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a12      	ldr	r2, [pc, #72]	; (8002238 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d004      	beq.n	80021fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a10      	ldr	r2, [pc, #64]	; (800223c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d10c      	bne.n	8002218 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002204:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	68ba      	ldr	r2, [r7, #8]
 800220c:	4313      	orrs	r3, r2
 800220e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68ba      	ldr	r2, [r7, #8]
 8002216:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3714      	adds	r7, #20
 800222e:	46bd      	mov	sp, r7
 8002230:	bc80      	pop	{r7}
 8002232:	4770      	bx	lr
 8002234:	40012c00 	.word	0x40012c00
 8002238:	40000400 	.word	0x40000400
 800223c:	40000800 	.word	0x40000800

08002240 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	bc80      	pop	{r7}
 8002250:	4770      	bx	lr

08002252 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002252:	b480      	push	{r7}
 8002254:	b083      	sub	sp, #12
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800225a:	bf00      	nop
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr

08002264 <__libc_init_array>:
 8002264:	b570      	push	{r4, r5, r6, lr}
 8002266:	2600      	movs	r6, #0
 8002268:	4d0c      	ldr	r5, [pc, #48]	; (800229c <__libc_init_array+0x38>)
 800226a:	4c0d      	ldr	r4, [pc, #52]	; (80022a0 <__libc_init_array+0x3c>)
 800226c:	1b64      	subs	r4, r4, r5
 800226e:	10a4      	asrs	r4, r4, #2
 8002270:	42a6      	cmp	r6, r4
 8002272:	d109      	bne.n	8002288 <__libc_init_array+0x24>
 8002274:	f000 f822 	bl	80022bc <_init>
 8002278:	2600      	movs	r6, #0
 800227a:	4d0a      	ldr	r5, [pc, #40]	; (80022a4 <__libc_init_array+0x40>)
 800227c:	4c0a      	ldr	r4, [pc, #40]	; (80022a8 <__libc_init_array+0x44>)
 800227e:	1b64      	subs	r4, r4, r5
 8002280:	10a4      	asrs	r4, r4, #2
 8002282:	42a6      	cmp	r6, r4
 8002284:	d105      	bne.n	8002292 <__libc_init_array+0x2e>
 8002286:	bd70      	pop	{r4, r5, r6, pc}
 8002288:	f855 3b04 	ldr.w	r3, [r5], #4
 800228c:	4798      	blx	r3
 800228e:	3601      	adds	r6, #1
 8002290:	e7ee      	b.n	8002270 <__libc_init_array+0xc>
 8002292:	f855 3b04 	ldr.w	r3, [r5], #4
 8002296:	4798      	blx	r3
 8002298:	3601      	adds	r6, #1
 800229a:	e7f2      	b.n	8002282 <__libc_init_array+0x1e>
 800229c:	080022f8 	.word	0x080022f8
 80022a0:	080022f8 	.word	0x080022f8
 80022a4:	080022f8 	.word	0x080022f8
 80022a8:	080022fc 	.word	0x080022fc

080022ac <memset>:
 80022ac:	4603      	mov	r3, r0
 80022ae:	4402      	add	r2, r0
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d100      	bne.n	80022b6 <memset+0xa>
 80022b4:	4770      	bx	lr
 80022b6:	f803 1b01 	strb.w	r1, [r3], #1
 80022ba:	e7f9      	b.n	80022b0 <memset+0x4>

080022bc <_init>:
 80022bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022be:	bf00      	nop
 80022c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022c2:	bc08      	pop	{r3}
 80022c4:	469e      	mov	lr, r3
 80022c6:	4770      	bx	lr

080022c8 <_fini>:
 80022c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ca:	bf00      	nop
 80022cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022ce:	bc08      	pop	{r3}
 80022d0:	469e      	mov	lr, r3
 80022d2:	4770      	bx	lr
